
Lab6_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006118  08006118  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006120  08006120  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006120  08006120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b8  20000074  0800619c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000462c  0800619c  0002462c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f977  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002825  00000000  00000000  0002fa1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00032240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b6d  00000000  00000000  00033b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea82  00000000  00000000  0004a6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e26f  00000000  00000000  00059147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e73b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003838  00000000  00000000  000e7408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f8c 	.word	0x08005f8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005f8c 	.word	0x08005f8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetTimerTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	200002e4 	.word	0x200002e4
 80005f8:	20000338 	.word	0x20000338

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fba1 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f82b 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f8bd 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 f891 	bl	8000734 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UART_mutex_id */
  osMutexDef(UART_mutex_id);
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  UART_mutex_idHandle = osMutexCreate(osMutex(UART_mutex_id));
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f001 ff8d 	bl	800253e <osMutexCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <main+0x58>)
 8000628:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <main+0x5c>)
 800062c:	1d3c      	adds	r4, r7, #4
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f001 ff1c 	bl	800247e <osThreadCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <main+0x60>)
 800064a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800064c:	f001 ff10 	bl	8002470 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x54>
 8000652:	bf00      	nop
 8000654:	20000780 	.word	0x20000780
 8000658:	08005fe0 	.word	0x08005fe0
 800065c:	2000077c 	.word	0x2000077c

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 f824 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d0:	2310      	movs	r3, #16
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006da:	2304      	movs	r3, #4
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fe3e 	bl	8001368 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f2:	f000 fa19 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f8a0 	bl	8001858 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 fa03 	bl	8000b28 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART2_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800076c:	f001 fa94 	bl	8001c98 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f9d7 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000738 	.word	0x20000738
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b42      	ldr	r3, [pc, #264]	; (80008ac <MX_GPIO_Init+0x124>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a41      	ldr	r2, [pc, #260]	; (80008ac <MX_GPIO_Init+0x124>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <MX_GPIO_Init+0x124>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MX_GPIO_Init+0x124>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a3a      	ldr	r2, [pc, #232]	; (80008ac <MX_GPIO_Init+0x124>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b38      	ldr	r3, [pc, #224]	; (80008ac <MX_GPIO_Init+0x124>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <MX_GPIO_Init+0x124>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a33      	ldr	r2, [pc, #204]	; (80008ac <MX_GPIO_Init+0x124>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_GPIO_Init+0x124>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_GPIO_Init+0x124>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_GPIO_Init+0x124>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0x124>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	21a0      	movs	r1, #160	; 0xa0
 8000812:	4827      	ldr	r0, [pc, #156]	; (80008b0 <MX_GPIO_Init+0x128>)
 8000814:	f000 fd74 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	4825      	ldr	r0, [pc, #148]	; (80008b4 <MX_GPIO_Init+0x12c>)
 8000820:	f000 fd6e 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	4823      	ldr	r0, [pc, #140]	; (80008b8 <MX_GPIO_Init+0x130>)
 800082c:	f000 fd68 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x12c>)
 8000848:	f000 fbd6 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7;
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_GPIO_Init+0x128>)
 8000864:	f000 fbc8 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_GPIO_Init+0x12c>)
 8000882:	f000 fbb9 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x130>)
 80008a0:	f000 fbaa 	bl	8000ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020400 	.word	0x40020400

080008bc <led_thread_1>:

/* USER CODE BEGIN 4 */
void led_thread_1(void const *args){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008c4:	2120      	movs	r1, #32
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <led_thread_1+0x18>)
 80008c8:	f000 fd33 	bl	8001332 <HAL_GPIO_TogglePin>
		osDelay(50);
 80008cc:	2032      	movs	r0, #50	; 0x32
 80008ce:	f001 fe22 	bl	8002516 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008d2:	e7f7      	b.n	80008c4 <led_thread_1+0x8>
 80008d4:	40020000 	.word	0x40020000

080008d8 <led_thread_2>:
	}
}
void led_thread_2(void const *args){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <led_thread_2+0x18>)
 80008e4:	f000 fd25 	bl	8001332 <HAL_GPIO_TogglePin>
		osDelay(18);
 80008e8:	2012      	movs	r0, #18
 80008ea:	f001 fe14 	bl	8002516 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80008ee:	e7f7      	b.n	80008e0 <led_thread_2+0x8>
 80008f0:	40020000 	.word	0x40020000

080008f4 <led_thread_3>:
	}
}
void led_thread_3(void const *args){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80008fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <led_thread_3+0x1c>)
 8000902:	f000 fd16 	bl	8001332 <HAL_GPIO_TogglePin>
		osDelay(128);
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	f001 fe05 	bl	8002516 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800090c:	e7f6      	b.n	80008fc <led_thread_3+0x8>
 800090e:	bf00      	nop
 8000910:	40020400 	.word	0x40020400

08000914 <led_thread_4>:
	}
}
void led_thread_4(void const *args){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <led_thread_4+0x1c>)
 8000922:	f000 fd06 	bl	8001332 <HAL_GPIO_TogglePin>
		osDelay(64);
 8000926:	2040      	movs	r0, #64	; 0x40
 8000928:	f001 fdf5 	bl	8002516 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800092c:	e7f6      	b.n	800091c <led_thread_4+0x8>
 800092e:	bf00      	nop
 8000930:	40020800 	.word	0x40020800

08000934 <UART_thread_1>:
	}
}
void UART_thread_1(void const *args){
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	int threadID = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while(1) {
		osMutexWait(UART_mutex_idHandle, osWaitForever);
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <UART_thread_1+0x60>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f04f 31ff 	mov.w	r1, #4294967295
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fe0f 	bl	8002570 <osMutexWait>
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000952:	f107 0008 	add.w	r0, r7, #8
 8000956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800095a:	490f      	ldr	r1, [pc, #60]	; (8000998 <UART_thread_1+0x64>)
 800095c:	f004 feb6 	bl	80056cc <siprintf>
		idx ++;
 8000960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000962:	3301      	adds	r3, #1
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc38 	bl	80001e0 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <UART_thread_1+0x68>)
 800097e:	f001 f9d8 	bl	8001d32 <HAL_UART_Transmit>
		osMutexRelease(UART_mutex_idHandle);
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <UART_thread_1+0x60>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fe40 	bl	800260c <osMutexRelease>
		osDelay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f001 fdc2 	bl	8002516 <osDelay>
	while(1) {
 8000992:	e7d7      	b.n	8000944 <UART_thread_1+0x10>
 8000994:	20000780 	.word	0x20000780
 8000998:	08005ffc 	.word	0x08005ffc
 800099c:	20000738 	.word	0x20000738

080009a0 <UART_thread_2>:
	}
}
void UART_thread_2(void const *args){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	int threadID = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while(1) {
		osMutexWait(UART_mutex_idHandle, osWaitForever);
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <UART_thread_2+0x60>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f04f 31ff 	mov.w	r1, #4294967295
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fdd9 	bl	8002570 <osMutexWait>
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 80009be:	f107 0008 	add.w	r0, r7, #8
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009c6:	490f      	ldr	r1, [pc, #60]	; (8000a04 <UART_thread_2+0x64>)
 80009c8:	f004 fe80 	bl	80056cc <siprintf>
		idx ++;
 80009cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ce:	3301      	adds	r3, #1
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc02 	bl	80001e0 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f107 0108 	add.w	r1, r7, #8
 80009e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <UART_thread_2+0x68>)
 80009ea:	f001 f9a2 	bl	8001d32 <HAL_UART_Transmit>
		osMutexRelease(UART_mutex_idHandle);
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <UART_thread_2+0x60>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fe0a 	bl	800260c <osMutexRelease>
		osDelay(10);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f001 fd8c 	bl	8002516 <osDelay>
	while(1) {
 80009fe:	e7d7      	b.n	80009b0 <UART_thread_2+0x10>
 8000a00:	20000780 	.word	0x20000780
 8000a04:	08005ffc 	.word	0x08005ffc
 8000a08:	20000738 	.word	0x20000738

08000a0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b0b6      	sub	sp, #216	; 0xd8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osMutexDef(UART_mutex);
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	osMutexId UART_mutex_id = osMutexCreate(osMutex(UART_mutex));
 8000a20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fd8a 	bl	800253e <osMutexCreate>
 8000a2a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	osThreadDef(led_1, led_thread_1, osPriorityNormal, 0,128);
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <StartDefaultTask+0x104>)
 8000a30:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000a34:	461d      	mov	r5, r3
 8000a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId ledTaskHandle_1 = osThreadCreate(osThread(led_1), NULL);
 8000a42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fd18 	bl	800247e <osThreadCreate>
 8000a4e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	osThreadDef(led_2, led_thread_2, osPriorityNormal, 0,128);
 8000a52:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <StartDefaultTask+0x108>)
 8000a54:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000a58:	461d      	mov	r5, r3
 8000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId ledTaskHandle_2 = osThreadCreate(osThread(led_2), NULL);
 8000a66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fd06 	bl	800247e <osThreadCreate>
 8000a72:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	osThreadDef(led_3, led_thread_3, osPriorityNormal, 0,128);
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <StartDefaultTask+0x10c>)
 8000a78:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000a7c:	461d      	mov	r5, r3
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId ledTaskHandle_3 = osThreadCreate(osThread(led_3), NULL);
 8000a8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fcf4 	bl	800247e <osThreadCreate>
 8000a96:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	osThreadDef(led_4, led_thread_4, osPriorityNormal, 0,128);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <StartDefaultTask+0x110>)
 8000a9c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId ledTaskHandle_4 = osThreadCreate(osThread(led_4), NULL);
 8000aae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fce2 	bl	800247e <osThreadCreate>
 8000aba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	osThreadDef(UART_1, UART_thread_1, osPriorityNormal, 0,128);
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <StartDefaultTask+0x114>)
 8000ac0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId UARTTaskHandle_1 = osThreadCreate(osThread(UART_1), NULL);
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fcd0 	bl	800247e <osThreadCreate>
 8000ade:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	osThreadDef(UART_2, UART_thread_2, osPriorityNormal, 0,128);
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <StartDefaultTask+0x118>)
 8000ae4:	f107 040c 	add.w	r4, r7, #12
 8000ae8:	461d      	mov	r5, r3
 8000aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId UARTTaskHandle_2 = osThreadCreate(osThread(UART_2), NULL);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fcbe 	bl	800247e <osThreadCreate>
 8000b02:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f001 fd05 	bl	8002516 <osDelay>
 8000b0c:	e7fb      	b.n	8000b06 <StartDefaultTask+0xfa>
 8000b0e:	bf00      	nop
 8000b10:	0800600c 	.word	0x0800600c
 8000b14:	08006028 	.word	0x08006028
 8000b18:	08006044 	.word	0x08006044
 8000b1c:	08006060 	.word	0x08006060
 8000b20:	0800607c 	.word	0x0800607c
 8000b24:	08006098 	.word	0x08006098

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_MspInit+0x54>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_MspInit+0x54>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x54>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_MspInit+0x54>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_MspInit+0x54>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x54>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	f06f 0001 	mvn.w	r0, #1
 8000b7a:	f000 fa14 	bl	8000fa6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12b      	bne.n	8000c06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_UART_MspInit+0x8c>)
 8000c02:	f000 f9f9 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f8ce 	bl	8000dec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c50:	f003 fb6c 	bl	800432c <xTaskGetSchedulerState>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d001      	beq.n	8000c5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c5a:	f004 fa7d 	bl	8005158 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f004 fcda 	bl	800564c <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	20000784 	.word	0x20000784
 8000ccc:	20004630 	.word	0x20004630

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f004 fc99 	bl	8005658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fc69 	bl	80005fc <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d38:	08006128 	.word	0x08006128
  ldr r2, =_sbss
 8000d3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d40:	2000462c 	.word	0x2000462c

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f90d 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff feda 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f917 	bl	8000fde <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f8ed 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000788 	.word	0x20000788

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000788 	.word	0x20000788

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff47 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff5c 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffb0 	bl	8000f4c <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	e159      	b.n	80012c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	f040 8148 	bne.w	80012c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d005      	beq.n	800104a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	2b02      	cmp	r3, #2
 8001048:	d130      	bne.n	80010ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 0201 	and.w	r2, r3, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d017      	beq.n	80010e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d123      	bne.n	800113c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	69b9      	ldr	r1, [r7, #24]
 8001138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0203 	and.w	r2, r3, #3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80a2 	beq.w	80012c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <HAL_GPIO_Init+0x2e8>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_GPIO_Init+0x2e8>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x2e8>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119a:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x2ec>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <HAL_GPIO_Init+0x2f0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x202>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x2f4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x1fe>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a47      	ldr	r2, [pc, #284]	; (80012f0 <HAL_GPIO_Init+0x2f8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x1fa>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <HAL_GPIO_Init+0x2fc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x1f6>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_GPIO_Init+0x300>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x1f2>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e004      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x204>
 80011fa:	2300      	movs	r3, #0
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4093      	lsls	r3, r2
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800120c:	4935      	ldr	r1, [pc, #212]	; (80012e4 <HAL_GPIO_Init+0x2ec>)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_GPIO_Init+0x304>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001268:	4a24      	ldr	r2, [pc, #144]	; (80012fc <HAL_GPIO_Init+0x304>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001292:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_GPIO_Init+0x304>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_GPIO_Init+0x304>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_GPIO_Init+0x304>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	f67f aea2 	bls.w	8001014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001344:	887a      	ldrh	r2, [r7, #2]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	041a      	lsls	r2, r3, #16
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43d9      	mvns	r1, r3
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	400b      	ands	r3, r1
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e267      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d075      	beq.n	8001472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001386:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b04      	cmp	r3, #4
 8001390:	d00c      	beq.n	80013ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001392:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139a:	2b08      	cmp	r3, #8
 800139c:	d112      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4b82      	ldr	r3, [pc, #520]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013aa:	d10b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d05b      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d157      	bne.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e242      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x74>
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a75      	ldr	r2, [pc, #468]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6f      	ldr	r2, [pc, #444]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6c      	ldr	r2, [pc, #432]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 8001400:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a68      	ldr	r2, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fcf8 	bl	8000e14 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fcf4 	bl	8000e14 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e207      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xc0>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fce4 	bl	8000e14 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fce0 	bl	8000e14 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1f3      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d063      	beq.n	8001546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001492:	2b08      	cmp	r3, #8
 8001494:	d11c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x152>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1c7      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	e03a      	b.n	8001546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d8:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_RCC_OscConfig+0x244>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fc99 	bl	8000e14 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc95 	bl	8000e14 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1a8      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4925      	ldr	r1, [pc, #148]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_OscConfig+0x244>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fc78 	bl	8000e14 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fc74 	bl	8000e14 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e187      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d036      	beq.n	80015c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d016      	beq.n	8001588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_RCC_OscConfig+0x248>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fc58 	bl	8000e14 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc54 	bl	8000e14 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e167      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x240>)
 800157c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x200>
 8001586:	e01b      	b.n	80015c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_OscConfig+0x248>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fc41 	bl	8000e14 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	e00e      	b.n	80015b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fc3d 	bl	8000e14 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d907      	bls.n	80015b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e150      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	42470000 	.word	0x42470000
 80015b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1ea      	bne.n	8001596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8097 	beq.w	80016fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d2:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a7c      	ldr	r2, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b77      	ldr	r3, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d118      	bne.n	800163c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160a:	4b74      	ldr	r3, [pc, #464]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a73      	ldr	r2, [pc, #460]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fbfd 	bl	8000e14 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff fbf9 	bl	8000e14 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e10c      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x474>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x2ea>
 8001644:	4b64      	ldr	r3, [pc, #400]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a63      	ldr	r2, [pc, #396]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	e01c      	b.n	800168c <HAL_RCC_OscConfig+0x324>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x30c>
 800165a:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a5e      	ldr	r2, [pc, #376]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a5b      	ldr	r2, [pc, #364]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x324>
 8001674:	4b58      	ldr	r3, [pc, #352]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a57      	ldr	r2, [pc, #348]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a54      	ldr	r2, [pc, #336]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 0304 	bic.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d015      	beq.n	80016c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff fbbe 	bl	8000e14 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff fbba 	bl	8000e14 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0cb      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0ee      	beq.n	800169c <HAL_RCC_OscConfig+0x334>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fba8 	bl	8000e14 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c6:	e00a      	b.n	80016de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff fba4 	bl	8000e14 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e0b5      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ee      	bne.n	80016c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a38      	ldr	r2, [pc, #224]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80016f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a1 	beq.w	8001848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d05c      	beq.n	80017cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d141      	bne.n	800179e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fb78 	bl	8000e14 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fb74 	bl	8000e14 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e087      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	491b      	ldr	r1, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fb4d 	bl	8000e14 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff fb49 	bl	8000e14 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e05c      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x416>
 800179c:	e054      	b.n	8001848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_RCC_OscConfig+0x478>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb36 	bl	8000e14 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fb32 	bl	8000e14 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e045      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x444>
 80017ca:	e03d      	b.n	8001848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e038      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000
 80017e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x4ec>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d028      	beq.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d121      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d11a      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800181a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181c:	4293      	cmp	r3, r2
 800181e:	d111      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0cc      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d90c      	bls.n	8001894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d044      	beq.n	8001978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d119      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d003      	beq.n	8001916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	2b03      	cmp	r3, #3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e067      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4934      	ldr	r1, [pc, #208]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff fa64 	bl	8000e14 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff fa60 	bl	8000e14 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e04f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d20c      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9c4 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00
 8001a14:	40023800 	.word	0x40023800
 8001a18:	080060cc 	.word	0x080060cc
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a28:	b094      	sub	sp, #80	; 0x50
 8001a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a30:	2300      	movs	r3, #0
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a3c:	4b79      	ldr	r3, [pc, #484]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d00d      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	f200 80e1 	bhi.w	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x34>
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a56:	e0db      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a5c:	e0db      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a62:	e0d8      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a64:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d063      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	2200      	movs	r2, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
 8001a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a96:	4622      	mov	r2, r4
 8001a98:	462b      	mov	r3, r5
 8001a9a:	f04f 0000 	mov.w	r0, #0
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	0159      	lsls	r1, r3, #5
 8001aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa8:	0150      	lsls	r0, r2, #5
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4621      	mov	r1, r4
 8001ab0:	1a51      	subs	r1, r2, r1
 8001ab2:	6139      	str	r1, [r7, #16]
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac8:	4659      	mov	r1, fp
 8001aca:	018b      	lsls	r3, r1, #6
 8001acc:	4651      	mov	r1, sl
 8001ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad2:	4651      	mov	r1, sl
 8001ad4:	018a      	lsls	r2, r1, #6
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8001adc:	4659      	mov	r1, fp
 8001ade:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af6:	4690      	mov	r8, r2
 8001af8:	4699      	mov	r9, r3
 8001afa:	4623      	mov	r3, r4
 8001afc:	eb18 0303 	adds.w	r3, r8, r3
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	462b      	mov	r3, r5
 8001b04:	eb49 0303 	adc.w	r3, r9, r3
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b16:	4629      	mov	r1, r5
 8001b18:	024b      	lsls	r3, r1, #9
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b20:	4621      	mov	r1, r4
 8001b22:	024a      	lsls	r2, r1, #9
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b34:	f7fe fbac 	bl	8000290 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b40:	e058      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b5c:	4642      	mov	r2, r8
 8001b5e:	464b      	mov	r3, r9
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	0159      	lsls	r1, r3, #5
 8001b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6e:	0150      	lsls	r0, r2, #5
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4641      	mov	r1, r8
 8001b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b94:	ebb2 040a 	subs.w	r4, r2, sl
 8001b98:	eb63 050b 	sbc.w	r5, r3, fp
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	00eb      	lsls	r3, r5, #3
 8001ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001baa:	00e2      	lsls	r2, r4, #3
 8001bac:	4614      	mov	r4, r2
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4643      	mov	r3, r8
 8001bb2:	18e3      	adds	r3, r4, r3
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	eb45 0303 	adc.w	r3, r5, r3
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	028b      	lsls	r3, r1, #10
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	028a      	lsls	r2, r1, #10
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	61fa      	str	r2, [r7, #28]
 8001be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be8:	f7fe fb52 	bl	8000290 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	080060dc 	.word	0x080060dc

08001c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c74:	f7ff ffdc 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0b5b      	lsrs	r3, r3, #13
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	080060dc 	.word	0x080060dc

08001c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e03f      	b.n	8001d2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe ff64 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f929 	bl	8001f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b08a      	sub	sp, #40	; 0x28
 8001d36:	af02      	add	r7, sp, #8
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d17c      	bne.n	8001e4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_UART_Transmit+0x2c>
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e075      	b.n	8001e4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_UART_Transmit+0x3e>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e06e      	b.n	8001e4e <HAL_UART_Transmit+0x11c>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2221      	movs	r2, #33	; 0x21
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d86:	f7ff f845 	bl	8000e14 <HAL_GetTick>
 8001d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da0:	d108      	bne.n	8001db4 <HAL_UART_Transmit+0x82>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d104      	bne.n	8001db4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	e003      	b.n	8001dbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001dc4:	e02a      	b.n	8001e1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f840 	bl	8001e56 <UART_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e036      	b.n	8001e4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10b      	bne.n	8001dfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	e007      	b.n	8001e0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1cf      	bne.n	8001dc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2140      	movs	r1, #64	; 0x40
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f810 	bl	8001e56 <UART_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e006      	b.n	8001e4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b090      	sub	sp, #64	; 0x40
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4613      	mov	r3, r2
 8001e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e66:	e050      	b.n	8001f0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d04c      	beq.n	8001f0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e76:	f7fe ffcd 	bl	8000e14 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d241      	bcs.n	8001f0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	330c      	adds	r3, #12
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e90:	e853 3f00 	ldrex	r3, [r3]
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ea6:	637a      	str	r2, [r7, #52]	; 0x34
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eae:	e841 2300 	strex	r3, r2, [r1]
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1e5      	bne.n	8001e86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3314      	adds	r3, #20
 8001ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	e853 3f00 	ldrex	r3, [r3]
 8001ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3314      	adds	r3, #20
 8001ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eda:	623a      	str	r2, [r7, #32]
 8001edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ede:	69f9      	ldr	r1, [r7, #28]
 8001ee0:	6a3a      	ldr	r2, [r7, #32]
 8001ee2:	e841 2300 	strex	r3, r2, [r1]
 8001ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e5      	bne.n	8001eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e00f      	b.n	8001f2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	bf0c      	ite	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	2300      	movne	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d09f      	beq.n	8001e68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3740      	adds	r7, #64	; 0x40
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f38:	b0c0      	sub	sp, #256	; 0x100
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f50:	68d9      	ldr	r1, [r3, #12]
 8001f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	ea40 0301 	orr.w	r3, r0, r1
 8001f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f8c:	f021 010c 	bic.w	r1, r1, #12
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fae:	6999      	ldr	r1, [r3, #24]
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	ea40 0301 	orr.w	r3, r0, r1
 8001fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <UART_SetConfig+0x2cc>)
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d005      	beq.n	8001fd4 <UART_SetConfig+0xa0>
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b8d      	ldr	r3, [pc, #564]	; (8002204 <UART_SetConfig+0x2d0>)
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d104      	bne.n	8001fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fd4:	f7ff fe4c 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 8001fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fdc:	e003      	b.n	8001fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fde:	f7ff fe33 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8001fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff0:	f040 810c 	bne.w	800220c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002006:	4622      	mov	r2, r4
 8002008:	462b      	mov	r3, r5
 800200a:	1891      	adds	r1, r2, r2
 800200c:	65b9      	str	r1, [r7, #88]	; 0x58
 800200e:	415b      	adcs	r3, r3
 8002010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002016:	4621      	mov	r1, r4
 8002018:	eb12 0801 	adds.w	r8, r2, r1
 800201c:	4629      	mov	r1, r5
 800201e:	eb43 0901 	adc.w	r9, r3, r1
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800202e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002036:	4690      	mov	r8, r2
 8002038:	4699      	mov	r9, r3
 800203a:	4623      	mov	r3, r4
 800203c:	eb18 0303 	adds.w	r3, r8, r3
 8002040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002044:	462b      	mov	r3, r5
 8002046:	eb49 0303 	adc.w	r3, r9, r3
 800204a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800205a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800205e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002062:	460b      	mov	r3, r1
 8002064:	18db      	adds	r3, r3, r3
 8002066:	653b      	str	r3, [r7, #80]	; 0x50
 8002068:	4613      	mov	r3, r2
 800206a:	eb42 0303 	adc.w	r3, r2, r3
 800206e:	657b      	str	r3, [r7, #84]	; 0x54
 8002070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002078:	f7fe f90a 	bl	8000290 <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4b61      	ldr	r3, [pc, #388]	; (8002208 <UART_SetConfig+0x2d4>)
 8002082:	fba3 2302 	umull	r2, r3, r3, r2
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	011c      	lsls	r4, r3, #4
 800208a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800208e:	2200      	movs	r2, #0
 8002090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800209c:	4642      	mov	r2, r8
 800209e:	464b      	mov	r3, r9
 80020a0:	1891      	adds	r1, r2, r2
 80020a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80020a4:	415b      	adcs	r3, r3
 80020a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020ac:	4641      	mov	r1, r8
 80020ae:	eb12 0a01 	adds.w	sl, r2, r1
 80020b2:	4649      	mov	r1, r9
 80020b4:	eb43 0b01 	adc.w	fp, r3, r1
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020cc:	4692      	mov	sl, r2
 80020ce:	469b      	mov	fp, r3
 80020d0:	4643      	mov	r3, r8
 80020d2:	eb1a 0303 	adds.w	r3, sl, r3
 80020d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020da:	464b      	mov	r3, r9
 80020dc:	eb4b 0303 	adc.w	r3, fp, r3
 80020e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020f8:	460b      	mov	r3, r1
 80020fa:	18db      	adds	r3, r3, r3
 80020fc:	643b      	str	r3, [r7, #64]	; 0x40
 80020fe:	4613      	mov	r3, r2
 8002100:	eb42 0303 	adc.w	r3, r2, r3
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
 8002106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800210a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800210e:	f7fe f8bf 	bl	8000290 <__aeabi_uldivmod>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4611      	mov	r1, r2
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <UART_SetConfig+0x2d4>)
 800211a:	fba3 2301 	umull	r2, r3, r3, r1
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2264      	movs	r2, #100	; 0x64
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	1acb      	subs	r3, r1, r3
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <UART_SetConfig+0x2d4>)
 8002130:	fba3 2302 	umull	r2, r3, r3, r2
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800213c:	441c      	add	r4, r3
 800213e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800214c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	1891      	adds	r1, r2, r2
 8002156:	63b9      	str	r1, [r7, #56]	; 0x38
 8002158:	415b      	adcs	r3, r3
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002160:	4641      	mov	r1, r8
 8002162:	1851      	adds	r1, r2, r1
 8002164:	6339      	str	r1, [r7, #48]	; 0x30
 8002166:	4649      	mov	r1, r9
 8002168:	414b      	adcs	r3, r1
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002178:	4659      	mov	r1, fp
 800217a:	00cb      	lsls	r3, r1, #3
 800217c:	4651      	mov	r1, sl
 800217e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002182:	4651      	mov	r1, sl
 8002184:	00ca      	lsls	r2, r1, #3
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4603      	mov	r3, r0
 800218c:	4642      	mov	r2, r8
 800218e:	189b      	adds	r3, r3, r2
 8002190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002194:	464b      	mov	r3, r9
 8002196:	460a      	mov	r2, r1
 8002198:	eb42 0303 	adc.w	r3, r2, r3
 800219c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021b4:	460b      	mov	r3, r1
 80021b6:	18db      	adds	r3, r3, r3
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ba:	4613      	mov	r3, r2
 80021bc:	eb42 0303 	adc.w	r3, r2, r3
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021ca:	f7fe f861 	bl	8000290 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <UART_SetConfig+0x2d4>)
 80021d4:	fba3 1302 	umull	r1, r3, r3, r2
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	2164      	movs	r1, #100	; 0x64
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	3332      	adds	r3, #50	; 0x32
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <UART_SetConfig+0x2d4>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	f003 0207 	and.w	r2, r3, #7
 80021f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4422      	add	r2, r4
 80021fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021fc:	e105      	b.n	800240a <UART_SetConfig+0x4d6>
 80021fe:	bf00      	nop
 8002200:	40011000 	.word	0x40011000
 8002204:	40011400 	.word	0x40011400
 8002208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800220c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002210:	2200      	movs	r2, #0
 8002212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800221a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800221e:	4642      	mov	r2, r8
 8002220:	464b      	mov	r3, r9
 8002222:	1891      	adds	r1, r2, r2
 8002224:	6239      	str	r1, [r7, #32]
 8002226:	415b      	adcs	r3, r3
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800222e:	4641      	mov	r1, r8
 8002230:	1854      	adds	r4, r2, r1
 8002232:	4649      	mov	r1, r9
 8002234:	eb43 0501 	adc.w	r5, r3, r1
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	00eb      	lsls	r3, r5, #3
 8002242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002246:	00e2      	lsls	r2, r4, #3
 8002248:	4614      	mov	r4, r2
 800224a:	461d      	mov	r5, r3
 800224c:	4643      	mov	r3, r8
 800224e:	18e3      	adds	r3, r4, r3
 8002250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002254:	464b      	mov	r3, r9
 8002256:	eb45 0303 	adc.w	r3, r5, r3
 800225a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800226a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800227a:	4629      	mov	r1, r5
 800227c:	008b      	lsls	r3, r1, #2
 800227e:	4621      	mov	r1, r4
 8002280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002284:	4621      	mov	r1, r4
 8002286:	008a      	lsls	r2, r1, #2
 8002288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800228c:	f7fe f800 	bl	8000290 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4b60      	ldr	r3, [pc, #384]	; (8002418 <UART_SetConfig+0x4e4>)
 8002296:	fba3 2302 	umull	r2, r3, r3, r2
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	011c      	lsls	r4, r3, #4
 800229e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	1891      	adds	r1, r2, r2
 80022b6:	61b9      	str	r1, [r7, #24]
 80022b8:	415b      	adcs	r3, r3
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c0:	4641      	mov	r1, r8
 80022c2:	1851      	adds	r1, r2, r1
 80022c4:	6139      	str	r1, [r7, #16]
 80022c6:	4649      	mov	r1, r9
 80022c8:	414b      	adcs	r3, r1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022d8:	4659      	mov	r1, fp
 80022da:	00cb      	lsls	r3, r1, #3
 80022dc:	4651      	mov	r1, sl
 80022de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e2:	4651      	mov	r1, sl
 80022e4:	00ca      	lsls	r2, r1, #3
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	4642      	mov	r2, r8
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022f4:	464b      	mov	r3, r9
 80022f6:	460a      	mov	r2, r1
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	67bb      	str	r3, [r7, #120]	; 0x78
 800230a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002318:	4649      	mov	r1, r9
 800231a:	008b      	lsls	r3, r1, #2
 800231c:	4641      	mov	r1, r8
 800231e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002322:	4641      	mov	r1, r8
 8002324:	008a      	lsls	r2, r1, #2
 8002326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800232a:	f7fd ffb1 	bl	8000290 <__aeabi_uldivmod>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4b39      	ldr	r3, [pc, #228]	; (8002418 <UART_SetConfig+0x4e4>)
 8002334:	fba3 1302 	umull	r1, r3, r3, r2
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	2164      	movs	r1, #100	; 0x64
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	3332      	adds	r3, #50	; 0x32
 8002346:	4a34      	ldr	r2, [pc, #208]	; (8002418 <UART_SetConfig+0x4e4>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002352:	441c      	add	r4, r3
 8002354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002358:	2200      	movs	r2, #0
 800235a:	673b      	str	r3, [r7, #112]	; 0x70
 800235c:	677a      	str	r2, [r7, #116]	; 0x74
 800235e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002362:	4642      	mov	r2, r8
 8002364:	464b      	mov	r3, r9
 8002366:	1891      	adds	r1, r2, r2
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	415b      	adcs	r3, r3
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002372:	4641      	mov	r1, r8
 8002374:	1851      	adds	r1, r2, r1
 8002376:	6039      	str	r1, [r7, #0]
 8002378:	4649      	mov	r1, r9
 800237a:	414b      	adcs	r3, r1
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800238a:	4659      	mov	r1, fp
 800238c:	00cb      	lsls	r3, r1, #3
 800238e:	4651      	mov	r1, sl
 8002390:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002394:	4651      	mov	r1, sl
 8002396:	00ca      	lsls	r2, r1, #3
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	4603      	mov	r3, r0
 800239e:	4642      	mov	r2, r8
 80023a0:	189b      	adds	r3, r3, r2
 80023a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80023a4:	464b      	mov	r3, r9
 80023a6:	460a      	mov	r2, r1
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	663b      	str	r3, [r7, #96]	; 0x60
 80023b8:	667a      	str	r2, [r7, #100]	; 0x64
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023c6:	4649      	mov	r1, r9
 80023c8:	008b      	lsls	r3, r1, #2
 80023ca:	4641      	mov	r1, r8
 80023cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023d0:	4641      	mov	r1, r8
 80023d2:	008a      	lsls	r2, r1, #2
 80023d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023d8:	f7fd ff5a 	bl	8000290 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <UART_SetConfig+0x4e4>)
 80023e2:	fba3 1302 	umull	r1, r3, r3, r2
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2164      	movs	r1, #100	; 0x64
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	3332      	adds	r3, #50	; 0x32
 80023f4:	4a08      	ldr	r2, [pc, #32]	; (8002418 <UART_SetConfig+0x4e4>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4422      	add	r2, r4
 8002408:	609a      	str	r2, [r3, #8]
}
 800240a:	bf00      	nop
 800240c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002410:	46bd      	mov	sp, r7
 8002412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002416:	bf00      	nop
 8002418:	51eb851f 	.word	0x51eb851f

0800241c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800242a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242e:	2b84      	cmp	r3, #132	; 0x84
 8002430:	d005      	beq.n	800243e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	3303      	adds	r3, #3
 800243c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002452:	f3ef 8305 	mrs	r3, IPSR
 8002456:	607b      	str	r3, [r7, #4]
  return(result);
 8002458:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002474:	f001 fb1a 	bl	8003aac <vTaskStartScheduler>
  
  return osOK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}

0800247e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800247e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002480:	b089      	sub	sp, #36	; 0x24
 8002482:	af04      	add	r7, sp, #16
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <osThreadCreate+0x54>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01c      	beq.n	80024d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685c      	ldr	r4, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681d      	ldr	r5, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691e      	ldr	r6, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ffb6 	bl	800241c <makeFreeRtosPriority>
 80024b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ba:	9202      	str	r2, [sp, #8]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	9100      	str	r1, [sp, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4632      	mov	r2, r6
 80024c4:	4629      	mov	r1, r5
 80024c6:	4620      	mov	r0, r4
 80024c8:	f001 f928 	bl	800371c <xTaskCreateStatic>
 80024cc:	4603      	mov	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e01c      	b.n	800250c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685c      	ldr	r4, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024de:	b29e      	uxth	r6, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff98 	bl	800241c <makeFreeRtosPriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	9200      	str	r2, [sp, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	4632      	mov	r2, r6
 80024fa:	4629      	mov	r1, r5
 80024fc:	4620      	mov	r0, r4
 80024fe:	f001 f96a 	bl	80037d6 <xTaskCreate>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d001      	beq.n	800250c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800250c:	68fb      	ldr	r3, [r7, #12]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002516 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <osDelay+0x16>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	e000      	b.n	800252e <osDelay+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fa88 	bl	8003a44 <vTaskDelay>
  
  return osOK;
 8002534:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4619      	mov	r1, r3
 8002554:	2001      	movs	r0, #1
 8002556:	f000 faae 	bl	8002ab6 <xQueueCreateMutexStatic>
 800255a:	4603      	mov	r3, r0
 800255c:	e003      	b.n	8002566 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800255e:	2001      	movs	r0, #1
 8002560:	f000 fa91 	bl	8002a86 <xQueueCreateMutex>
 8002564:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <osMutexWait+0x18>
    return osErrorParameter;
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	e03a      	b.n	80025fe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d103      	bne.n	800259c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e009      	b.n	80025b0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <osMutexWait+0x40>
      ticks = 1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80025b0:	f7ff ff4c 	bl	800244c <inHandlerMode>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d017      	beq.n	80025ea <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	461a      	mov	r2, r3
 80025c0:	2100      	movs	r1, #0
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fea4 	bl	8003310 <xQueueReceiveFromISR>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <osMutexWait+0x62>
      return osErrorOS;
 80025ce:	23ff      	movs	r3, #255	; 0xff
 80025d0:	e015      	b.n	80025fe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d011      	beq.n	80025fc <osMutexWait+0x8c>
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <osMutexWait+0x98>)
 80025da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	e008      	b.n	80025fc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fd83 	bl	80030f8 <xQueueSemaphoreTake>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d001      	beq.n	80025fc <osMutexWait+0x8c>
    return osErrorOS;
 80025f8:	23ff      	movs	r3, #255	; 0xff
 80025fa:	e000      	b.n	80025fe <osMutexWait+0x8e>
  }
  
  return osOK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800261c:	f7ff ff16 	bl	800244c <inHandlerMode>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fbf6 	bl	8002e1e <xQueueGiveFromISR>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <osMutexRelease+0x30>
      return osErrorOS;
 8002638:	23ff      	movs	r3, #255	; 0xff
 800263a:	e017      	b.n	800266c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d013      	beq.n	800266a <osMutexRelease+0x5e>
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <osMutexRelease+0x68>)
 8002644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	e00a      	b.n	800266a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002654:	2300      	movs	r3, #0
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa46 	bl	8002aec <xQueueGenericSend>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002666:	23ff      	movs	r3, #255	; 0xff
 8002668:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f103 0208 	add.w	r2, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f04f 32ff 	mov.w	r2, #4294967295
 8002690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f103 0208 	add.w	r2, r3, #8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f103 0208 	add.w	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d103      	bne.n	800273a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e00c      	b.n	8002754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3308      	adds	r3, #8
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e002      	b.n	8002748 <vListInsert+0x2e>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	429a      	cmp	r2, r3
 8002752:	d2f6      	bcs.n	8002742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	601a      	str	r2, [r3, #0]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6892      	ldr	r2, [r2, #8]
 80027a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6852      	ldr	r2, [r2, #4]
 80027ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d103      	bne.n	80027c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800280a:	f002 fc13 	bl	8005034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	68f9      	ldr	r1, [r7, #12]
 8002818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	441a      	add	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	3b01      	subs	r3, #1
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	441a      	add	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d114      	bne.n	800288a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01a      	beq.n	800289e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3310      	adds	r3, #16
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fba1 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <xQueueGenericReset+0xcc>)
 800287a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	e009      	b.n	800289e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3310      	adds	r3, #16
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fef2 	bl	8002678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3324      	adds	r3, #36	; 0x24
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff feed 	bl	8002678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800289e:	f002 fbf9 	bl	8005094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	e000ed04 	.word	0xe000ed04

080028b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	; 0x38
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <xQueueGenericCreateStatic+0x52>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <xQueueGenericCreateStatic+0x56>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <xQueueGenericCreateStatic+0x58>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	623b      	str	r3, [r7, #32]
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <xQueueGenericCreateStatic+0x7e>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <xQueueGenericCreateStatic+0x82>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <xQueueGenericCreateStatic+0x84>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	61fb      	str	r3, [r7, #28]
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800294e:	2348      	movs	r3, #72	; 0x48
 8002950:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b48      	cmp	r3, #72	; 0x48
 8002956:	d00a      	beq.n	800296e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	61bb      	str	r3, [r7, #24]
}
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800296e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002982:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f83f 	bl	8002a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002998:	4618      	mov	r0, r3
 800299a:	3730      	adds	r7, #48	; 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	613b      	str	r3, [r7, #16]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3348      	adds	r3, #72	; 0x48
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 fc4d 	bl	8005278 <pvPortMalloc>
 80029de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d011      	beq.n	8002a0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3348      	adds	r3, #72	; 0x48
 80029ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029f8:	79fa      	ldrb	r2, [r7, #7]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f805 	bl	8002a14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
	}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e002      	b.n	8002a36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a42:	2101      	movs	r1, #1
 8002a44:	69b8      	ldr	r0, [r7, #24]
 8002a46:	f7ff fecb 	bl	80027e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a72:	2300      	movs	r3, #0
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f837 	bl	8002aec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a90:	2301      	movs	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6939      	ldr	r1, [r7, #16]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff7e 	bl	80029a0 <xQueueGenericCreate>
 8002aa4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ffd3 	bl	8002a52 <prvInitialiseMutex>

		return xNewQueue;
 8002aac:	68fb      	ldr	r3, [r7, #12]
	}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b088      	sub	sp, #32
 8002aba:	af02      	add	r7, sp, #8
 8002abc:	4603      	mov	r3, r0
 8002abe:	6039      	str	r1, [r7, #0]
 8002ac0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7ff feeb 	bl	80028b0 <xQueueGenericCreateStatic>
 8002ada:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff ffb8 	bl	8002a52 <prvInitialiseMutex>

		return xNewQueue;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
	}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericSend+0x32>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <xQueueGenericSend+0x40>
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <xQueueGenericSend+0x44>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <xQueueGenericSend+0x46>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <xQueueGenericSend+0x60>
	__asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b48:	bf00      	nop
 8002b4a:	e7fe      	b.n	8002b4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d103      	bne.n	8002b5a <xQueueGenericSend+0x6e>
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <xQueueGenericSend+0x72>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericSend+0x74>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueGenericSend+0x8e>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	623b      	str	r3, [r7, #32]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b7a:	f001 fbd7 	bl	800432c <xTaskGetSchedulerState>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <xQueueGenericSend+0x9e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <xQueueGenericSend+0xa2>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <xQueueGenericSend+0xa4>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericSend+0xbe>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	61fb      	str	r3, [r7, #28]
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002baa:	f002 fa43 	bl	8005034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <xQueueGenericSend+0xd4>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d129      	bne.n	8002c14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc6:	f000 fc3b 	bl	8003440 <prvCopyDataToQueue>
 8002bca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	3324      	adds	r3, #36	; 0x24
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 f9eb 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002be4:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <xQueueGenericSend+0x1f8>)
 8002be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	e00a      	b.n	8002c0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <xQueueGenericSend+0x1f8>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c0c:	f002 fa42 	bl	8005094 <vPortExitCritical>
				return pdPASS;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e063      	b.n	8002cdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c1a:	f002 fa3b 	bl	8005094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e05c      	b.n	8002cdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fa23 	bl	8004078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c36:	f002 fa2d 	bl	8005094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c3a:	f000 ff9d 	bl	8003b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c3e:	f002 f9f9 	bl	8005034 <vPortEnterCritical>
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d103      	bne.n	8002c58 <xQueueGenericSend+0x16c>
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d103      	bne.n	8002c6e <xQueueGenericSend+0x182>
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c6e:	f002 fa11 	bl	8005094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c72:	1d3a      	adds	r2, r7, #4
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fa12 	bl	80040a4 <xTaskCheckForTimeOut>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d124      	bne.n	8002cd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c88:	f000 fcd2 	bl	8003630 <prvIsQueueFull>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d018      	beq.n	8002cc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	3310      	adds	r3, #16
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f93a 	bl	8003f14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca2:	f000 fc5d 	bl	8003560 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ca6:	f000 ff75 	bl	8003b94 <xTaskResumeAll>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f af7c 	bne.w	8002baa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <xQueueGenericSend+0x1f8>)
 8002cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	e772      	b.n	8002baa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc6:	f000 fc4b 	bl	8003560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cca:	f000 ff63 	bl	8003b94 <xTaskResumeAll>
 8002cce:	e76c      	b.n	8002baa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd2:	f000 fc45 	bl	8003560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cd6:	f000 ff5d 	bl	8003b94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3738      	adds	r7, #56	; 0x38
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b090      	sub	sp, #64	; 0x40
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <xQueueGenericSendFromISR+0x3c>
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <xQueueGenericSendFromISR+0x40>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <xQueueGenericSendFromISR+0x42>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d40:	bf00      	nop
 8002d42:	e7fe      	b.n	8002d42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d103      	bne.n	8002d52 <xQueueGenericSendFromISR+0x6a>
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <xQueueGenericSendFromISR+0x6e>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <xQueueGenericSendFromISR+0x70>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	623b      	str	r3, [r7, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	e7fe      	b.n	8002d70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d72:	f002 fa41 	bl	80051f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d76:	f3ef 8211 	mrs	r2, BASEPRI
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	61fa      	str	r2, [r7, #28]
 8002d8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <xQueueGenericSendFromISR+0xbc>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d12f      	bne.n	8002e04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dba:	f000 fb41 	bl	8003440 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d112      	bne.n	8002dee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d016      	beq.n	8002dfe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd2:	3324      	adds	r3, #36	; 0x24
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 f8ed 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e007      	b.n	8002dfe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002df2:	3301      	adds	r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	b25a      	sxtb	r2, r3
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e02:	e001      	b.n	8002e08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3740      	adds	r7, #64	; 0x40
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08e      	sub	sp, #56	; 0x38
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	623b      	str	r3, [r7, #32]
}
 8002e44:	bf00      	nop
 8002e46:	e7fe      	b.n	8002e46 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	61fb      	str	r3, [r7, #28]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <xQueueGiveFromISR+0x58>
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <xQueueGiveFromISR+0x5c>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueGiveFromISR+0x5e>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	61bb      	str	r3, [r7, #24]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e96:	f002 f9af 	bl	80051f8 <vPortValidateInterruptPriority>
	__asm volatile
 8002e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	617a      	str	r2, [r7, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002eb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d22b      	bcs.n	8002f1e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d112      	bne.n	8002f08 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	3324      	adds	r3, #36	; 0x24
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f860 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e007      	b.n	8002f18 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	b25a      	sxtb	r2, r3
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1c:	e001      	b.n	8002f22 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f383 8811 	msr	BASEPRI, r3
}
 8002f2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3738      	adds	r7, #56	; 0x38
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <xQueueReceive+0x30>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	623b      	str	r3, [r7, #32]
}
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <xQueueReceive+0x3e>
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <xQueueReceive+0x42>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueReceive+0x44>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <xQueueReceive+0x5e>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	61fb      	str	r3, [r7, #28]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f96:	f001 f9c9 	bl	800432c <xTaskGetSchedulerState>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <xQueueReceive+0x6e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <xQueueReceive+0x72>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <xQueueReceive+0x74>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <xQueueReceive+0x8e>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	61bb      	str	r3, [r7, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	e7fe      	b.n	8002fc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fc6:	f002 f835 	bl	8005034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01f      	beq.n	8003016 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fda:	f000 fa9b 	bl	8003514 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00f      	beq.n	800300e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	3310      	adds	r3, #16
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 ffde 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <xQueueReceive+0x1bc>)
 8003000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800300e:	f002 f841 	bl	8005094 <vPortExitCritical>
				return pdPASS;
 8003012:	2301      	movs	r3, #1
 8003014:	e069      	b.n	80030ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800301c:	f002 f83a 	bl	8005094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003020:	2300      	movs	r3, #0
 8003022:	e062      	b.n	80030ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800302a:	f107 0310 	add.w	r3, r7, #16
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f822 	bl	8004078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003038:	f002 f82c 	bl	8005094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800303c:	f000 fd9c 	bl	8003b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003040:	f001 fff8 	bl	8005034 <vPortEnterCritical>
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800304a:	b25b      	sxtb	r3, r3
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d103      	bne.n	800305a <xQueueReceive+0x122>
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003060:	b25b      	sxtb	r3, r3
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d103      	bne.n	8003070 <xQueueReceive+0x138>
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003070:	f002 f810 	bl	8005094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003074:	1d3a      	adds	r2, r7, #4
 8003076:	f107 0310 	add.w	r3, r7, #16
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f811 	bl	80040a4 <xTaskCheckForTimeOut>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d123      	bne.n	80030d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308a:	f000 fabb 	bl	8003604 <prvIsQueueEmpty>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f000 ff39 	bl	8003f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a4:	f000 fa5c 	bl	8003560 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030a8:	f000 fd74 	bl	8003b94 <xTaskResumeAll>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d189      	bne.n	8002fc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <xQueueReceive+0x1bc>)
 80030b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	e780      	b.n	8002fc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c6:	f000 fa4b 	bl	8003560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ca:	f000 fd63 	bl	8003b94 <xTaskResumeAll>
 80030ce:	e77a      	b.n	8002fc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d2:	f000 fa45 	bl	8003560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030d6:	f000 fd5d 	bl	8003b94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030dc:	f000 fa92 	bl	8003604 <prvIsQueueEmpty>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f43f af6f 	beq.w	8002fc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3730      	adds	r7, #48	; 0x30
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	e000ed04 	.word	0xe000ed04

080030f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08e      	sub	sp, #56	; 0x38
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800310a:	2300      	movs	r3, #0
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	623b      	str	r3, [r7, #32]
}
 8003126:	bf00      	nop
 8003128:	e7fe      	b.n	8003128 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	61fb      	str	r3, [r7, #28]
}
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003148:	f001 f8f0 	bl	800432c <xTaskGetSchedulerState>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <xQueueSemaphoreTake+0x60>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <xQueueSemaphoreTake+0x64>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <xQueueSemaphoreTake+0x66>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	61bb      	str	r3, [r7, #24]
}
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003178:	f001 ff5c 	bl	8005034 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d024      	beq.n	80031d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003198:	f001 fa70 	bl	800467c <pvTaskIncrementMutexHeldCount>
 800319c:	4602      	mov	r2, r0
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00f      	beq.n	80031ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	3310      	adds	r3, #16
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 ff00 	bl	8003fb4 <xTaskRemoveFromEventList>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031ba:	4b54      	ldr	r3, [pc, #336]	; (800330c <xQueueSemaphoreTake+0x214>)
 80031bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031ca:	f001 ff63 	bl	8005094 <vPortExitCritical>
				return pdPASS;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e097      	b.n	8003302 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d111      	bne.n	80031fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	617b      	str	r3, [r7, #20]
}
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031f4:	f001 ff4e 	bl	8005094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e082      	b.n	8003302 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003202:	f107 030c 	add.w	r3, r7, #12
 8003206:	4618      	mov	r0, r3
 8003208:	f000 ff36 	bl	8004078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003210:	f001 ff40 	bl	8005094 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003214:	f000 fcb0 	bl	8003b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003218:	f001 ff0c 	bl	8005034 <vPortEnterCritical>
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003222:	b25b      	sxtb	r3, r3
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d103      	bne.n	8003232 <xQueueSemaphoreTake+0x13a>
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003238:	b25b      	sxtb	r3, r3
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d103      	bne.n	8003248 <xQueueSemaphoreTake+0x150>
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003248:	f001 ff24 	bl	8005094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800324c:	463a      	mov	r2, r7
 800324e:	f107 030c 	add.w	r3, r7, #12
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f000 ff25 	bl	80040a4 <xTaskCheckForTimeOut>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d132      	bne.n	80032c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003262:	f000 f9cf 	bl	8003604 <prvIsQueueEmpty>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d026      	beq.n	80032ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003274:	f001 fede 	bl	8005034 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f873 	bl	8004368 <xTaskPriorityInherit>
 8003282:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003284:	f001 ff06 	bl	8005094 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	3324      	adds	r3, #36	; 0x24
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fe3f 	bl	8003f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003298:	f000 f962 	bl	8003560 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800329c:	f000 fc7a 	bl	8003b94 <xTaskResumeAll>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f47f af68 	bne.w	8003178 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80032a8:	4b18      	ldr	r3, [pc, #96]	; (800330c <xQueueSemaphoreTake+0x214>)
 80032aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	e75e      	b.n	8003178 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032bc:	f000 f950 	bl	8003560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032c0:	f000 fc68 	bl	8003b94 <xTaskResumeAll>
 80032c4:	e758      	b.n	8003178 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032c8:	f000 f94a 	bl	8003560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032cc:	f000 fc62 	bl	8003b94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032d2:	f000 f997 	bl	8003604 <prvIsQueueEmpty>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f43f af4d 	beq.w	8003178 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032e4:	f001 fea6 	bl	8005034 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ea:	f000 f891 	bl	8003410 <prvGetDisinheritPriorityAfterTimeout>
 80032ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 f932 	bl	8004560 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032fc:	f001 feca 	bl	8005094 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003300:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003302:	4618      	mov	r0, r3
 8003304:	3738      	adds	r7, #56	; 0x38
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08e      	sub	sp, #56	; 0x38
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	623b      	str	r3, [r7, #32]
}
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <xQueueReceiveFromISR+0x3a>
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <xQueueReceiveFromISR+0x3e>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueReceiveFromISR+0x40>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61fb      	str	r3, [r7, #28]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800336a:	f001 ff45 	bl	80051f8 <vPortValidateInterruptPriority>
	__asm volatile
 800336e:	f3ef 8211 	mrs	r2, BASEPRI
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	61ba      	str	r2, [r7, #24]
 8003384:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003386:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	2b00      	cmp	r3, #0
 8003394:	d02f      	beq.n	80033f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800339c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033a4:	f000 f8b6 	bl	8003514 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	1e5a      	subs	r2, r3, #1
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80033b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d112      	bne.n	80033e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	3310      	adds	r3, #16
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fdf4 	bl	8003fb4 <xTaskRemoveFromEventList>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00e      	beq.n	80033f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00b      	beq.n	80033f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e007      	b.n	80033f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80033e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033e4:	3301      	adds	r3, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	b25a      	sxtb	r2, r3
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80033f0:	2301      	movs	r3, #1
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
 80033f4:	e001      	b.n	80033fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f383 8811 	msr	BASEPRI, r3
}
 8003404:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003408:	4618      	mov	r0, r3
 800340a:	3738      	adds	r7, #56	; 0x38
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1c3 0307 	rsb	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e001      	b.n	8003432 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003432:	68fb      	ldr	r3, [r7, #12]
	}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d14d      	bne.n	8003502 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fff2 	bl	8004454 <xTaskPriorityDisinherit>
 8003470:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	e043      	b.n	8003502 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d119      	bne.n	80034b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6858      	ldr	r0, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	461a      	mov	r2, r3
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	f002 f908 	bl	80056a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	441a      	add	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d32b      	bcc.n	8003502 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e026      	b.n	8003502 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68d8      	ldr	r0, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	461a      	mov	r2, r3
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	f002 f8ee 	bl	80056a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	425b      	negs	r3, r3
 80034ce:	441a      	add	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d207      	bcs.n	80034f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	425b      	negs	r3, r3
 80034ea:	441a      	add	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d105      	bne.n	8003502 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	3b01      	subs	r3, #1
 8003500:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800350a:	697b      	ldr	r3, [r7, #20]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d018      	beq.n	8003558 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d303      	bcc.n	8003548 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68d9      	ldr	r1, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	461a      	mov	r2, r3
 8003552:	6838      	ldr	r0, [r7, #0]
 8003554:	f002 f8a4 	bl	80056a0 <memcpy>
	}
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003568:	f001 fd64 	bl	8005034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003572:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003574:	e011      	b.n	800359a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d012      	beq.n	80035a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3324      	adds	r3, #36	; 0x24
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fd16 	bl	8003fb4 <xTaskRemoveFromEventList>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800358e:	f000 fdeb 	bl	8004168 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	3b01      	subs	r3, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dce9      	bgt.n	8003576 <prvUnlockQueue+0x16>
 80035a2:	e000      	b.n	80035a6 <prvUnlockQueue+0x46>
					break;
 80035a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	22ff      	movs	r2, #255	; 0xff
 80035aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035ae:	f001 fd71 	bl	8005094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035b2:	f001 fd3f 	bl	8005034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035be:	e011      	b.n	80035e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d012      	beq.n	80035ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3310      	adds	r3, #16
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fcf1 	bl	8003fb4 <xTaskRemoveFromEventList>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035d8:	f000 fdc6 	bl	8004168 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035dc:	7bbb      	ldrb	r3, [r7, #14]
 80035de:	3b01      	subs	r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	dce9      	bgt.n	80035c0 <prvUnlockQueue+0x60>
 80035ec:	e000      	b.n	80035f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	22ff      	movs	r2, #255	; 0xff
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035f8:	f001 fd4c 	bl	8005094 <vPortExitCritical>
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800360c:	f001 fd12 	bl	8005034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003618:	2301      	movs	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e001      	b.n	8003622 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003622:	f001 fd37 	bl	8005094 <vPortExitCritical>

	return xReturn;
 8003626:	68fb      	ldr	r3, [r7, #12]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003638:	f001 fcfc 	bl	8005034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	429a      	cmp	r2, r3
 8003646:	d102      	bne.n	800364e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e001      	b.n	8003652 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003652:	f001 fd1f 	bl	8005094 <vPortExitCritical>

	return xReturn;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	e014      	b.n	800369a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003670:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <vQueueAddToRegistry+0x50>)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800367c:	490c      	ldr	r1, [pc, #48]	; (80036b0 <vQueueAddToRegistry+0x50>)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <vQueueAddToRegistry+0x50>)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003692:	e006      	b.n	80036a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b07      	cmp	r3, #7
 800369e:	d9e7      	bls.n	8003670 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	2000078c 	.word	0x2000078c

080036b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036c4:	f001 fcb6 	bl	8005034 <vPortEnterCritical>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d103      	bne.n	80036de <vQueueWaitForMessageRestricted+0x2a>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d103      	bne.n	80036f4 <vQueueWaitForMessageRestricted+0x40>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f4:	f001 fcce 	bl	8005094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3324      	adds	r3, #36	; 0x24
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fc27 	bl	8003f5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7ff ff26 	bl	8003560 <prvUnlockQueue>
	}
 8003714:	bf00      	nop
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08e      	sub	sp, #56	; 0x38
 8003720:	af04      	add	r7, sp, #16
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	623b      	str	r3, [r7, #32]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xTaskCreateStatic+0x46>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	61fb      	str	r3, [r7, #28]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003762:	2354      	movs	r3, #84	; 0x54
 8003764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b54      	cmp	r3, #84	; 0x54
 800376a:	d00a      	beq.n	8003782 <xTaskCreateStatic+0x66>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	61bb      	str	r3, [r7, #24]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01e      	beq.n	80037c8 <xTaskCreateStatic+0xac>
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01b      	beq.n	80037c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2202      	movs	r2, #2
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037a2:	2300      	movs	r3, #0
 80037a4:	9303      	str	r3, [sp, #12]
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	9302      	str	r3, [sp, #8]
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f850 	bl	8003860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037c2:	f000 f8d5 	bl	8003970 <prvAddNewTaskToReadyList>
 80037c6:	e001      	b.n	80037cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037cc:	697b      	ldr	r3, [r7, #20]
	}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b08c      	sub	sp, #48	; 0x30
 80037da:	af04      	add	r7, sp, #16
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fd44 	bl	8005278 <pvPortMalloc>
 80037f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037f8:	2054      	movs	r0, #84	; 0x54
 80037fa:	f001 fd3d 	bl	8005278 <pvPortMalloc>
 80037fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
 800380c:	e005      	b.n	800381a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f001 fdfe 	bl	8005410 <vPortFree>
 8003814:	e001      	b.n	800381a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d017      	beq.n	8003850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	2300      	movs	r3, #0
 800382c:	9303      	str	r3, [sp, #12]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	9302      	str	r3, [sp, #8]
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f80e 	bl	8003860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003844:	69f8      	ldr	r0, [r7, #28]
 8003846:	f000 f893 	bl	8003970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800384a:	2301      	movs	r3, #1
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e002      	b.n	8003856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003856:	69bb      	ldr	r3, [r7, #24]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003878:	3b01      	subs	r3, #1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f023 0307 	bic.w	r3, r3, #7
 8003886:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	617b      	str	r3, [r7, #20]
}
 80038a4:	bf00      	nop
 80038a6:	e7fe      	b.n	80038a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01f      	beq.n	80038ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e012      	b.n	80038da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	7819      	ldrb	r1, [r3, #0]
 80038bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	3334      	adds	r3, #52	; 0x34
 80038c4:	460a      	mov	r2, r1
 80038c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d9e9      	bls.n	80038b4 <prvInitialiseNewTask+0x54>
 80038e0:	e000      	b.n	80038e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80038e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ec:	e003      	b.n	80038f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2b06      	cmp	r3, #6
 80038fa:	d901      	bls.n	8003900 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038fc:	2306      	movs	r3, #6
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	3304      	adds	r3, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fece 	bl	80026b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	3318      	adds	r3, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fec9 	bl	80026b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	f1c3 0207 	rsb	r2, r3, #7
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	2200      	movs	r2, #0
 8003940:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	68f9      	ldr	r1, [r7, #12]
 800394e:	69b8      	ldr	r0, [r7, #24]
 8003950:	f001 fa40 	bl	8004dd4 <pxPortInitialiseStack>
 8003954:	4602      	mov	r2, r0
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003966:	bf00      	nop
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003978:	f001 fb5c 	bl	8005034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <prvAddNewTaskToReadyList+0xb8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <prvAddNewTaskToReadyList+0xb8>)
 8003984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003986:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <prvAddNewTaskToReadyList+0xbc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800398e:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <prvAddNewTaskToReadyList+0xbc>)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <prvAddNewTaskToReadyList+0xb8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d110      	bne.n	80039be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800399c:	f000 fc08 	bl	80041b0 <prvInitialiseTaskLists>
 80039a0:	e00d      	b.n	80039be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039a2:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <prvAddNewTaskToReadyList+0xc0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <prvAddNewTaskToReadyList+0xbc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d802      	bhi.n	80039be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <prvAddNewTaskToReadyList+0xbc>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <prvAddNewTaskToReadyList+0xc4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <prvAddNewTaskToReadyList+0xc4>)
 80039c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	2201      	movs	r2, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <prvAddNewTaskToReadyList+0xc8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <prvAddNewTaskToReadyList+0xc8>)
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <prvAddNewTaskToReadyList+0xcc>)
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f7fe fe6e 	bl	80026d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039f6:	f001 fb4d 	bl	8005094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <prvAddNewTaskToReadyList+0xc0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <prvAddNewTaskToReadyList+0xbc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d207      	bcs.n	8003a20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <prvAddNewTaskToReadyList+0xd0>)
 8003a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200008cc 	.word	0x200008cc
 8003a2c:	200007cc 	.word	0x200007cc
 8003a30:	200008d8 	.word	0x200008d8
 8003a34:	200008e8 	.word	0x200008e8
 8003a38:	200008d4 	.word	0x200008d4
 8003a3c:	200007d0 	.word	0x200007d0
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <vTaskDelay+0x60>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <vTaskDelay+0x30>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60bb      	str	r3, [r7, #8]
}
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a74:	f000 f880 	bl	8003b78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a78:	2100      	movs	r1, #0
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fe12 	bl	80046a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a80:	f000 f888 	bl	8003b94 <xTaskResumeAll>
 8003a84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <vTaskDelay+0x64>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	200008f4 	.word	0x200008f4
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003aba:	463a      	mov	r2, r7
 8003abc:	1d39      	adds	r1, r7, #4
 8003abe:	f107 0308 	add.w	r3, r7, #8
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fd66 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	9202      	str	r2, [sp, #8]
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	4921      	ldr	r1, [pc, #132]	; (8003b60 <vTaskStartScheduler+0xb4>)
 8003adc:	4821      	ldr	r0, [pc, #132]	; (8003b64 <vTaskStartScheduler+0xb8>)
 8003ade:	f7ff fe1d 	bl	800371c <xTaskCreateStatic>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <vTaskStartScheduler+0xbc>)
 8003ae6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <vTaskStartScheduler+0xbc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003af0:	2301      	movs	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e001      	b.n	8003afa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b00:	f000 fe36 	bl	8004770 <xTimerCreateTimerTask>
 8003b04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d116      	bne.n	8003b3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	613b      	str	r3, [r7, #16]
}
 8003b1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <vTaskStartScheduler+0xc0>)
 8003b22:	f04f 32ff 	mov.w	r2, #4294967295
 8003b26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <vTaskStartScheduler+0xc4>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <vTaskStartScheduler+0xc8>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b34:	f001 f9dc 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b38:	e00e      	b.n	8003b58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d10a      	bne.n	8003b58 <vTaskStartScheduler+0xac>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	60fb      	str	r3, [r7, #12]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <vTaskStartScheduler+0xaa>
}
 8003b58:	bf00      	nop
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	080060b4 	.word	0x080060b4
 8003b64:	08004181 	.word	0x08004181
 8003b68:	200008f0 	.word	0x200008f0
 8003b6c:	200008ec 	.word	0x200008ec
 8003b70:	200008d8 	.word	0x200008d8
 8003b74:	200008d0 	.word	0x200008d0

08003b78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b7c:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <vTaskSuspendAll+0x18>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a03      	ldr	r2, [pc, #12]	; (8003b90 <vTaskSuspendAll+0x18>)
 8003b84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	200008f4 	.word	0x200008f4

08003b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ba2:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <xTaskResumeAll+0x114>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	603b      	str	r3, [r7, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bc0:	f001 fa38 	bl	8005034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bc4:	4b38      	ldr	r3, [pc, #224]	; (8003ca8 <xTaskResumeAll+0x114>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	4a37      	ldr	r2, [pc, #220]	; (8003ca8 <xTaskResumeAll+0x114>)
 8003bcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <xTaskResumeAll+0x114>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d161      	bne.n	8003c9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bd6:	4b35      	ldr	r3, [pc, #212]	; (8003cac <xTaskResumeAll+0x118>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d05d      	beq.n	8003c9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bde:	e02e      	b.n	8003c3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <xTaskResumeAll+0x11c>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3318      	adds	r3, #24
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fdcd 	bl	800278c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fdc8 	bl	800278c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <xTaskResumeAll+0x120>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <xTaskResumeAll+0x120>)
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <xTaskResumeAll+0x124>)
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7fe fd54 	bl	80026d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <xTaskResumeAll+0x128>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <xTaskResumeAll+0x12c>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <xTaskResumeAll+0x11c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1cc      	bne.n	8003be0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c4c:	f000 fb4e 	bl	80042ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c50:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <xTaskResumeAll+0x130>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d010      	beq.n	8003c7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c5c:	f000 f846 	bl	8003cec <xTaskIncrementTick>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <xTaskResumeAll+0x12c>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f1      	bne.n	8003c5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <xTaskResumeAll+0x130>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <xTaskResumeAll+0x12c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <xTaskResumeAll+0x134>)
 8003c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 f9fb 	bl	8005094 <vPortExitCritical>

	return xAlreadyYielded;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200008f4 	.word	0x200008f4
 8003cac:	200008cc 	.word	0x200008cc
 8003cb0:	2000088c 	.word	0x2000088c
 8003cb4:	200008d4 	.word	0x200008d4
 8003cb8:	200007d0 	.word	0x200007d0
 8003cbc:	200007cc 	.word	0x200007cc
 8003cc0:	200008e0 	.word	0x200008e0
 8003cc4:	200008dc 	.word	0x200008dc
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <xTaskGetTickCount+0x1c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cd8:	687b      	ldr	r3, [r7, #4]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	200008d0 	.word	0x200008d0

08003cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf6:	4b4e      	ldr	r3, [pc, #312]	; (8003e30 <xTaskIncrementTick+0x144>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 808e 	bne.w	8003e1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d00:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <xTaskIncrementTick+0x148>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d08:	4a4a      	ldr	r2, [pc, #296]	; (8003e34 <xTaskIncrementTick+0x148>)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d120      	bne.n	8003d56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d14:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <xTaskIncrementTick+0x14c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	603b      	str	r3, [r7, #0]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <xTaskIncrementTick+0x46>
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <xTaskIncrementTick+0x14c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b40      	ldr	r3, [pc, #256]	; (8003e3c <xTaskIncrementTick+0x150>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3e      	ldr	r2, [pc, #248]	; (8003e38 <xTaskIncrementTick+0x14c>)
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4a3e      	ldr	r2, [pc, #248]	; (8003e3c <xTaskIncrementTick+0x150>)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <xTaskIncrementTick+0x154>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <xTaskIncrementTick+0x154>)
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	f000 facb 	bl	80042ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d56:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <xTaskIncrementTick+0x158>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d348      	bcc.n	8003df2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d60:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <xTaskIncrementTick+0x14c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <xTaskIncrementTick+0x158>)
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	601a      	str	r2, [r3, #0]
					break;
 8003d72:	e03e      	b.n	8003df2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d74:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <xTaskIncrementTick+0x14c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d203      	bcs.n	8003d94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <xTaskIncrementTick+0x158>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d92:	e02e      	b.n	8003df2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fcf7 	bl	800278c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3318      	adds	r3, #24
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fcee 	bl	800278c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <xTaskIncrementTick+0x15c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <xTaskIncrementTick+0x15c>)
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4a1f      	ldr	r2, [pc, #124]	; (8003e4c <xTaskIncrementTick+0x160>)
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f7fe fc7a 	bl	80026d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <xTaskIncrementTick+0x164>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d3b9      	bcc.n	8003d60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df0:	e7b6      	b.n	8003d60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <xTaskIncrementTick+0x164>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4914      	ldr	r1, [pc, #80]	; (8003e4c <xTaskIncrementTick+0x160>)
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d901      	bls.n	8003e0e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <xTaskIncrementTick+0x168>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e16:	2301      	movs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e004      	b.n	8003e26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <xTaskIncrementTick+0x16c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a0d      	ldr	r2, [pc, #52]	; (8003e58 <xTaskIncrementTick+0x16c>)
 8003e24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e26:	697b      	ldr	r3, [r7, #20]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	200008f4 	.word	0x200008f4
 8003e34:	200008d0 	.word	0x200008d0
 8003e38:	20000884 	.word	0x20000884
 8003e3c:	20000888 	.word	0x20000888
 8003e40:	200008e4 	.word	0x200008e4
 8003e44:	200008ec 	.word	0x200008ec
 8003e48:	200008d4 	.word	0x200008d4
 8003e4c:	200007d0 	.word	0x200007d0
 8003e50:	200007cc 	.word	0x200007cc
 8003e54:	200008e0 	.word	0x200008e0
 8003e58:	200008dc 	.word	0x200008dc

08003e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e62:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <vTaskSwitchContext+0xa4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e6a:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <vTaskSwitchContext+0xa8>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e70:	e03f      	b.n	8003ef2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <vTaskSwitchContext+0xa8>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <vTaskSwitchContext+0xac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e86:	7afb      	ldrb	r3, [r7, #11]
 8003e88:	f1c3 031f 	rsb	r3, r3, #31
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	491f      	ldr	r1, [pc, #124]	; (8003f0c <vTaskSwitchContext+0xb0>)
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	607b      	str	r3, [r7, #4]
}
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <vTaskSwitchContext+0x5a>
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <vTaskSwitchContext+0xb0>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d104      	bne.n	8003ee8 <vTaskSwitchContext+0x8c>
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <vTaskSwitchContext+0xb4>)
 8003ef0:	6013      	str	r3, [r2, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	200008f4 	.word	0x200008f4
 8003f04:	200008e0 	.word	0x200008e0
 8003f08:	200008d4 	.word	0x200008d4
 8003f0c:	200007d0 	.word	0x200007d0
 8003f10:	200007cc 	.word	0x200007cc

08003f14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	60fb      	str	r3, [r7, #12]
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <vTaskPlaceOnEventList+0x44>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fe fbe9 	bl	800271a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f48:	2101      	movs	r1, #1
 8003f4a:	6838      	ldr	r0, [r7, #0]
 8003f4c:	f000 fbaa 	bl	80046a4 <prvAddCurrentTaskToDelayedList>
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	200007cc 	.word	0x200007cc

08003f5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	617b      	str	r3, [r7, #20]
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7fe fba0 	bl	80026d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	68b8      	ldr	r0, [r7, #8]
 8003fa2:	f000 fb7f 	bl	80046a4 <prvAddCurrentTaskToDelayedList>
	}
 8003fa6:	bf00      	nop
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	200007cc 	.word	0x200007cc

08003fb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	60fb      	str	r3, [r7, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe fbd1 	bl	800278c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <xTaskRemoveFromEventList+0xac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11c      	bne.n	800402c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe fbc8 	bl	800278c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	2201      	movs	r2, #1
 8004002:	409a      	lsls	r2, r3
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <xTaskRemoveFromEventList+0xb0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <xTaskRemoveFromEventList+0xb0>)
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4a13      	ldr	r2, [pc, #76]	; (8004068 <xTaskRemoveFromEventList+0xb4>)
 800401c:	441a      	add	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f7fe fb54 	bl	80026d2 <vListInsertEnd>
 800402a:	e005      	b.n	8004038 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	3318      	adds	r3, #24
 8004030:	4619      	mov	r1, r3
 8004032:	480e      	ldr	r0, [pc, #56]	; (800406c <xTaskRemoveFromEventList+0xb8>)
 8004034:	f7fe fb4d 	bl	80026d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <xTaskRemoveFromEventList+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	429a      	cmp	r2, r3
 8004044:	d905      	bls.n	8004052 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004046:	2301      	movs	r3, #1
 8004048:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <xTaskRemoveFromEventList+0xc0>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e001      	b.n	8004056 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004056:	697b      	ldr	r3, [r7, #20]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200008f4 	.word	0x200008f4
 8004064:	200008d4 	.word	0x200008d4
 8004068:	200007d0 	.word	0x200007d0
 800406c:	2000088c 	.word	0x2000088c
 8004070:	200007cc 	.word	0x200007cc
 8004074:	200008e0 	.word	0x200008e0

08004078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <vTaskInternalSetTimeOutState+0x24>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <vTaskInternalSetTimeOutState+0x28>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	605a      	str	r2, [r3, #4]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	200008e4 	.word	0x200008e4
 80040a0:	200008d0 	.word	0x200008d0

080040a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	613b      	str	r3, [r7, #16]
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040e6:	f000 ffa5 	bl	8005034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040ea:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <xTaskCheckForTimeOut+0xbc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d102      	bne.n	800410a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e023      	b.n	8004152 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <xTaskCheckForTimeOut+0xc0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d007      	beq.n	8004126 <xTaskCheckForTimeOut+0x82>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e015      	b.n	8004152 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	d20b      	bcs.n	8004148 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ff9b 	bl	8004078 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e004      	b.n	8004152 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800414e:	2301      	movs	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004152:	f000 ff9f 	bl	8005094 <vPortExitCritical>

	return xReturn;
 8004156:	69fb      	ldr	r3, [r7, #28]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200008d0 	.word	0x200008d0
 8004164:	200008e4 	.word	0x200008e4

08004168 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <vTaskMissedYield+0x14>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	200008e0 	.word	0x200008e0

08004180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004188:	f000 f852 	bl	8004230 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <prvIdleTask+0x28>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d9f9      	bls.n	8004188 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <prvIdleTask+0x2c>)
 8004196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041a4:	e7f0      	b.n	8004188 <prvIdleTask+0x8>
 80041a6:	bf00      	nop
 80041a8:	200007d0 	.word	0x200007d0
 80041ac:	e000ed04 	.word	0xe000ed04

080041b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041b6:	2300      	movs	r3, #0
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	e00c      	b.n	80041d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <prvInitialiseTaskLists+0x60>)
 80041c8:	4413      	add	r3, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fa54 	bl	8002678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3301      	adds	r3, #1
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b06      	cmp	r3, #6
 80041da:	d9ef      	bls.n	80041bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041dc:	480d      	ldr	r0, [pc, #52]	; (8004214 <prvInitialiseTaskLists+0x64>)
 80041de:	f7fe fa4b 	bl	8002678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041e2:	480d      	ldr	r0, [pc, #52]	; (8004218 <prvInitialiseTaskLists+0x68>)
 80041e4:	f7fe fa48 	bl	8002678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041e8:	480c      	ldr	r0, [pc, #48]	; (800421c <prvInitialiseTaskLists+0x6c>)
 80041ea:	f7fe fa45 	bl	8002678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041ee:	480c      	ldr	r0, [pc, #48]	; (8004220 <prvInitialiseTaskLists+0x70>)
 80041f0:	f7fe fa42 	bl	8002678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041f4:	480b      	ldr	r0, [pc, #44]	; (8004224 <prvInitialiseTaskLists+0x74>)
 80041f6:	f7fe fa3f 	bl	8002678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <prvInitialiseTaskLists+0x78>)
 80041fc:	4a05      	ldr	r2, [pc, #20]	; (8004214 <prvInitialiseTaskLists+0x64>)
 80041fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <prvInitialiseTaskLists+0x7c>)
 8004202:	4a05      	ldr	r2, [pc, #20]	; (8004218 <prvInitialiseTaskLists+0x68>)
 8004204:	601a      	str	r2, [r3, #0]
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200007d0 	.word	0x200007d0
 8004214:	2000085c 	.word	0x2000085c
 8004218:	20000870 	.word	0x20000870
 800421c:	2000088c 	.word	0x2000088c
 8004220:	200008a0 	.word	0x200008a0
 8004224:	200008b8 	.word	0x200008b8
 8004228:	20000884 	.word	0x20000884
 800422c:	20000888 	.word	0x20000888

08004230 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004236:	e019      	b.n	800426c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004238:	f000 fefc 	bl	8005034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423c:	4b10      	ldr	r3, [pc, #64]	; (8004280 <prvCheckTasksWaitingTermination+0x50>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fa9f 	bl	800278c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <prvCheckTasksWaitingTermination+0x54>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3b01      	subs	r3, #1
 8004254:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <prvCheckTasksWaitingTermination+0x54>)
 8004256:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <prvCheckTasksWaitingTermination+0x58>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3b01      	subs	r3, #1
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <prvCheckTasksWaitingTermination+0x58>)
 8004260:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004262:	f000 ff17 	bl	8005094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f810 	bl	800428c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <prvCheckTasksWaitingTermination+0x58>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e1      	bne.n	8004238 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200008a0 	.word	0x200008a0
 8004284:	200008cc 	.word	0x200008cc
 8004288:	200008b4 	.word	0x200008b4

0800428c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f8b4 	bl	8005410 <vPortFree>
				vPortFree( pxTCB );
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 f8b1 	bl	8005410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042ae:	e018      	b.n	80042e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d103      	bne.n	80042c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 f8a8 	bl	8005410 <vPortFree>
	}
 80042c0:	e00f      	b.n	80042e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d00a      	beq.n	80042e2 <prvDeleteTCB+0x56>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	60fb      	str	r3, [r7, #12]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <prvDeleteTCB+0x54>
	}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <prvResetNextTaskUnblockTime+0x38>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <prvResetNextTaskUnblockTime+0x3c>)
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004304:	e008      	b.n	8004318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <prvResetNextTaskUnblockTime+0x38>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a04      	ldr	r2, [pc, #16]	; (8004328 <prvResetNextTaskUnblockTime+0x3c>)
 8004316:	6013      	str	r3, [r2, #0]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	20000884 	.word	0x20000884
 8004328:	200008ec 	.word	0x200008ec

0800432c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <xTaskGetSchedulerState+0x34>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800433a:	2301      	movs	r3, #1
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	e008      	b.n	8004352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <xTaskGetSchedulerState+0x38>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004348:	2302      	movs	r3, #2
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e001      	b.n	8004352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004352:	687b      	ldr	r3, [r7, #4]
	}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	200008d8 	.word	0x200008d8
 8004364:	200008f4 	.word	0x200008f4

08004368 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d05e      	beq.n	800443c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <xTaskPriorityInherit+0xe0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	429a      	cmp	r2, r3
 800438a:	d24e      	bcs.n	800442a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db06      	blt.n	80043a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004394:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <xTaskPriorityInherit+0xe0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f1c3 0207 	rsb	r2, r3, #7
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6959      	ldr	r1, [r3, #20]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4a26      	ldr	r2, [pc, #152]	; (800444c <xTaskPriorityInherit+0xe4>)
 80043b4:	4413      	add	r3, r2
 80043b6:	4299      	cmp	r1, r3
 80043b8:	d12f      	bne.n	800441a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	3304      	adds	r3, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe f9e4 	bl	800278c <uxListRemove>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	2201      	movs	r2, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43da      	mvns	r2, r3
 80043d6:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <xTaskPriorityInherit+0xe8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4013      	ands	r3, r2
 80043dc:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <xTaskPriorityInherit+0xe8>)
 80043de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <xTaskPriorityInherit+0xe0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	2201      	movs	r2, #1
 80043f0:	409a      	lsls	r2, r3
 80043f2:	4b17      	ldr	r3, [pc, #92]	; (8004450 <xTaskPriorityInherit+0xe8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <xTaskPriorityInherit+0xe8>)
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a10      	ldr	r2, [pc, #64]	; (800444c <xTaskPriorityInherit+0xe4>)
 800440a:	441a      	add	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7fe f95d 	bl	80026d2 <vListInsertEnd>
 8004418:	e004      	b.n	8004424 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <xTaskPriorityInherit+0xe0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e008      	b.n	800443c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <xTaskPriorityInherit+0xe0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	429a      	cmp	r2, r3
 8004436:	d201      	bcs.n	800443c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800443c:	68fb      	ldr	r3, [r7, #12]
	}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200007cc 	.word	0x200007cc
 800444c:	200007d0 	.word	0x200007d0
 8004450:	200008d4 	.word	0x200008d4

08004454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d06e      	beq.n	8004548 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800446a:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <xTaskPriorityDisinherit+0x100>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	429a      	cmp	r2, r3
 8004472:	d00a      	beq.n	800448a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60fb      	str	r3, [r7, #12]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60bb      	str	r3, [r7, #8]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	1e5a      	subs	r2, r3, #1
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d044      	beq.n	8004548 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d140      	bne.n	8004548 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe f95e 	bl	800278c <uxListRemove>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d115      	bne.n	8004502 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044da:	491f      	ldr	r1, [pc, #124]	; (8004558 <xTaskPriorityDisinherit+0x104>)
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <xTaskPriorityDisinherit+0xae>
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43da      	mvns	r2, r3
 80044f8:	4b18      	ldr	r3, [pc, #96]	; (800455c <xTaskPriorityDisinherit+0x108>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4013      	ands	r3, r2
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <xTaskPriorityDisinherit+0x108>)
 8004500:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	f1c3 0207 	rsb	r2, r3, #7
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	2201      	movs	r2, #1
 800451c:	409a      	lsls	r2, r3
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <xTaskPriorityDisinherit+0x108>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	4a0d      	ldr	r2, [pc, #52]	; (800455c <xTaskPriorityDisinherit+0x108>)
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <xTaskPriorityDisinherit+0x104>)
 8004536:	441a      	add	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7fe f8c7 	bl	80026d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004548:	697b      	ldr	r3, [r7, #20]
	}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200007cc 	.word	0x200007cc
 8004558:	200007d0 	.word	0x200007d0
 800455c:	200008d4 	.word	0x200008d4

08004560 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800456e:	2301      	movs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d077      	beq.n	8004668 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60fb      	str	r3, [r7, #12]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d902      	bls.n	80045a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e002      	b.n	80045ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d058      	beq.n	8004668 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d153      	bne.n	8004668 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80045c0:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d10a      	bne.n	80045e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60bb      	str	r3, [r7, #8]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db04      	blt.n	80045fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f1c3 0207 	rsb	r2, r3, #7
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6959      	ldr	r1, [r3, #20]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4a19      	ldr	r2, [pc, #100]	; (8004674 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800460e:	4413      	add	r3, r2
 8004610:	4299      	cmp	r1, r3
 8004612:	d129      	bne.n	8004668 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe f8b7 	bl	800278c <uxListRemove>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	2201      	movs	r2, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43da      	mvns	r2, r3
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4013      	ands	r3, r2
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004638:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	2201      	movs	r2, #1
 8004640:	409a      	lsls	r2, r3
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4313      	orrs	r3, r2
 8004648:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a06      	ldr	r2, [pc, #24]	; (8004674 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800465a:	441a      	add	r2, r3
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fe f835 	bl	80026d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004668:	bf00      	nop
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200007cc 	.word	0x200007cc
 8004674:	200007d0 	.word	0x200007d0
 8004678:	200008d4 	.word	0x200008d4

0800467c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800468e:	3201      	adds	r2, #1
 8004690:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004694:	681b      	ldr	r3, [r3, #0]
	}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	200007cc 	.word	0x200007cc

080046a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046ae:	4b29      	ldr	r3, [pc, #164]	; (8004754 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b4:	4b28      	ldr	r3, [pc, #160]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f866 	bl	800278c <uxListRemove>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	2201      	movs	r2, #1
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4013      	ands	r3, r2
 80046da:	4a20      	ldr	r2, [pc, #128]	; (800475c <prvAddCurrentTaskToDelayedList+0xb8>)
 80046dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d10a      	bne.n	80046fc <prvAddCurrentTaskToDelayedList+0x58>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	481a      	ldr	r0, [pc, #104]	; (8004760 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046f6:	f7fd ffec 	bl	80026d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046fa:	e026      	b.n	800474a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	429a      	cmp	r2, r3
 8004712:	d209      	bcs.n	8004728 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f7fd fffa 	bl	800271a <vListInsert>
}
 8004726:	e010      	b.n	800474a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <prvAddCurrentTaskToDelayedList+0xc4>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fd fff0 	bl	800271a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <prvAddCurrentTaskToDelayedList+0xc8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d202      	bcs.n	800474a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004744:	4a09      	ldr	r2, [pc, #36]	; (800476c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6013      	str	r3, [r2, #0]
}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200008d0 	.word	0x200008d0
 8004758:	200007cc 	.word	0x200007cc
 800475c:	200008d4 	.word	0x200008d4
 8004760:	200008b8 	.word	0x200008b8
 8004764:	20000888 	.word	0x20000888
 8004768:	20000884 	.word	0x20000884
 800476c:	200008ec 	.word	0x200008ec

08004770 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800477a:	f000 faeb 	bl	8004d54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800477e:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <xTimerCreateTimerTask+0x80>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d021      	beq.n	80047ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800478e:	1d3a      	adds	r2, r7, #4
 8004790:	f107 0108 	add.w	r1, r7, #8
 8004794:	f107 030c 	add.w	r3, r7, #12
 8004798:	4618      	mov	r0, r3
 800479a:	f7fb ff15 	bl	80005c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	9202      	str	r2, [sp, #8]
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	2302      	movs	r3, #2
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	460a      	mov	r2, r1
 80047b0:	4910      	ldr	r1, [pc, #64]	; (80047f4 <xTimerCreateTimerTask+0x84>)
 80047b2:	4811      	ldr	r0, [pc, #68]	; (80047f8 <xTimerCreateTimerTask+0x88>)
 80047b4:	f7fe ffb2 	bl	800371c <xTaskCreateStatic>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <xTimerCreateTimerTask+0x8c>)
 80047bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <xTimerCreateTimerTask+0x8c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047c6:	2301      	movs	r3, #1
 80047c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	613b      	str	r3, [r7, #16]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047e6:	697b      	ldr	r3, [r7, #20]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000928 	.word	0x20000928
 80047f4:	080060bc 	.word	0x080060bc
 80047f8:	08004935 	.word	0x08004935
 80047fc:	2000092c 	.word	0x2000092c

08004800 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	623b      	str	r3, [r7, #32]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <xTimerGenericCommand+0x98>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d02a      	beq.n	800488c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b05      	cmp	r3, #5
 8004846:	dc18      	bgt.n	800487a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004848:	f7ff fd70 	bl	800432c <xTaskGetSchedulerState>
 800484c:	4603      	mov	r3, r0
 800484e:	2b02      	cmp	r3, #2
 8004850:	d109      	bne.n	8004866 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <xTimerGenericCommand+0x98>)
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	f107 0114 	add.w	r1, r7, #20
 800485a:	2300      	movs	r3, #0
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	f7fe f945 	bl	8002aec <xQueueGenericSend>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24
 8004864:	e012      	b.n	800488c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004866:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <xTimerGenericCommand+0x98>)
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f107 0114 	add.w	r1, r7, #20
 800486e:	2300      	movs	r3, #0
 8004870:	2200      	movs	r2, #0
 8004872:	f7fe f93b 	bl	8002aec <xQueueGenericSend>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24
 8004878:	e008      	b.n	800488c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <xTimerGenericCommand+0x98>)
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	f107 0114 	add.w	r1, r7, #20
 8004882:	2300      	movs	r3, #0
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	f7fe fa2f 	bl	8002ce8 <xQueueGenericSendFromISR>
 800488a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800488e:	4618      	mov	r0, r3
 8004890:	3728      	adds	r7, #40	; 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000928 	.word	0x20000928

0800489c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a6:	4b22      	ldr	r3, [pc, #136]	; (8004930 <prvProcessExpiredTimer+0x94>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fd ff69 	bl	800278c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d022      	beq.n	800490e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	18d1      	adds	r1, r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	6978      	ldr	r0, [r7, #20]
 80048d6:	f000 f8d1 	bl	8004a7c <prvInsertTimerInActiveList>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01f      	beq.n	8004920 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	2100      	movs	r1, #0
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff88 	bl	8004800 <xTimerGenericCommand>
 80048f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d113      	bne.n	8004920 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60fb      	str	r3, [r7, #12]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	b2da      	uxtb	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	6978      	ldr	r0, [r7, #20]
 8004926:	4798      	blx	r3
}
 8004928:	bf00      	nop
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000920 	.word	0x20000920

08004934 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f857 	bl	80049f4 <prvGetNextExpireTime>
 8004946:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4619      	mov	r1, r3
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f803 	bl	8004958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004952:	f000 f8d5 	bl	8004b00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004956:	e7f1      	b.n	800493c <prvTimerTask+0x8>

08004958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004962:	f7ff f909 	bl	8003b78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f866 	bl	8004a3c <prvSampleTimeNow>
 8004970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d130      	bne.n	80049da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <prvProcessTimerOrBlockTask+0x3c>
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	429a      	cmp	r2, r3
 8004984:	d806      	bhi.n	8004994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004986:	f7ff f905 	bl	8003b94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff85 	bl	800489c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004992:	e024      	b.n	80049de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <prvProcessTimerOrBlockTask+0x90>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <prvProcessTimerOrBlockTask+0x50>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <prvProcessTimerOrBlockTask+0x52>
 80049a8:	2300      	movs	r3, #0
 80049aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <prvProcessTimerOrBlockTask+0x94>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f7fe fe7b 	bl	80036b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049be:	f7ff f8e9 	bl	8003b94 <xTaskResumeAll>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <prvProcessTimerOrBlockTask+0x98>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
}
 80049d8:	e001      	b.n	80049de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049da:	f7ff f8db 	bl	8003b94 <xTaskResumeAll>
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000924 	.word	0x20000924
 80049ec:	20000928 	.word	0x20000928
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <prvGetNextExpireTime+0x44>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <prvGetNextExpireTime+0x16>
 8004a06:	2201      	movs	r2, #1
 8004a08:	e000      	b.n	8004a0c <prvGetNextExpireTime+0x18>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <prvGetNextExpireTime+0x44>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e001      	b.n	8004a28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a28:	68fb      	ldr	r3, [r7, #12]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000920 	.word	0x20000920

08004a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a44:	f7ff f942 	bl	8003ccc <xTaskGetTickCount>
 8004a48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <prvSampleTimeNow+0x3c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d205      	bcs.n	8004a60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a54:	f000 f91a 	bl	8004c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a66:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <prvSampleTimeNow+0x3c>)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000930 	.word	0x20000930

08004a7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d812      	bhi.n	8004ac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e01b      	b.n	8004aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <prvInsertTimerInActiveList+0x7c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7fd fe2a 	bl	800271a <vListInsert>
 8004ac6:	e012      	b.n	8004aee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d206      	bcs.n	8004ade <prvInsertTimerInActiveList+0x62>
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e007      	b.n	8004aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <prvInsertTimerInActiveList+0x80>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7fd fe16 	bl	800271a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aee:	697b      	ldr	r3, [r7, #20]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000924 	.word	0x20000924
 8004afc:	20000920 	.word	0x20000920

08004b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08c      	sub	sp, #48	; 0x30
 8004b04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b06:	e0ae      	b.n	8004c66 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f2c0 80aa 	blt.w	8004c64 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd fe33 	bl	800278c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff87 	bl	8004a3c <prvSampleTimeNow>
 8004b2e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b09      	cmp	r3, #9
 8004b34:	f200 8097 	bhi.w	8004c66 <prvProcessReceivedCommands+0x166>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <prvProcessReceivedCommands+0x40>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004b69 	.word	0x08004b69
 8004b4c:	08004bdd 	.word	0x08004bdd
 8004b50:	08004bf1 	.word	0x08004bf1
 8004b54:	08004c3b 	.word	0x08004c3b
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b69 	.word	0x08004b69
 8004b60:	08004bdd 	.word	0x08004bdd
 8004b64:	08004bf1 	.word	0x08004bf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	18d1      	adds	r1, r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b88:	f7ff ff78 	bl	8004a7c <prvInsertTimerInActiveList>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d069      	beq.n	8004c66 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05e      	beq.n	8004c66 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	441a      	add	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bba:	f7ff fe21 	bl	8004800 <xTimerGenericCommand>
 8004bbe:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d14f      	bne.n	8004c66 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	61bb      	str	r3, [r7, #24]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004bee:	e03a      	b.n	8004c66 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	617b      	str	r3, [r7, #20]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	18d1      	adds	r1, r2, r3
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c34:	f7ff ff22 	bl	8004a7c <prvInsertTimerInActiveList>
					break;
 8004c38:	e015      	b.n	8004c66 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c4a:	f000 fbe1 	bl	8005410 <vPortFree>
 8004c4e:	e00a      	b.n	8004c66 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c62:	e000      	b.n	8004c66 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <prvProcessReceivedCommands+0x188>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f107 0108 	add.w	r1, r7, #8
 8004c6e:	2200      	movs	r2, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe f961 	bl	8002f38 <xQueueReceive>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f af45 	bne.w	8004b08 <prvProcessReceivedCommands+0x8>
	}
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	3728      	adds	r7, #40	; 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000928 	.word	0x20000928

08004c8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c92:	e048      	b.n	8004d26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <prvSwitchTimerLists+0xc0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <prvSwitchTimerLists+0xc0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fd fd6d 	bl	800278c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02e      	beq.n	8004d26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d90e      	bls.n	8004cf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce6:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <prvSwitchTimerLists+0xc0>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7fd fd12 	bl	800271a <vListInsert>
 8004cf6:	e016      	b.n	8004d26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	2100      	movs	r1, #0
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fd7c 	bl	8004800 <xTimerGenericCommand>
 8004d08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	603b      	str	r3, [r7, #0]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <prvSwitchTimerLists+0xc0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1b1      	bne.n	8004c94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <prvSwitchTimerLists+0xc0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <prvSwitchTimerLists+0xc0>)
 8004d3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d3e:	4a04      	ldr	r2, [pc, #16]	; (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6013      	str	r3, [r2, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000920 	.word	0x20000920
 8004d50:	20000924 	.word	0x20000924

08004d54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d5a:	f000 f96b 	bl	8005034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <prvCheckForValidListAndQueue+0x60>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d120      	bne.n	8004da8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d66:	4814      	ldr	r0, [pc, #80]	; (8004db8 <prvCheckForValidListAndQueue+0x64>)
 8004d68:	f7fd fc86 	bl	8002678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d6c:	4813      	ldr	r0, [pc, #76]	; (8004dbc <prvCheckForValidListAndQueue+0x68>)
 8004d6e:	f7fd fc83 	bl	8002678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <prvCheckForValidListAndQueue+0x6c>)
 8004d74:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <prvCheckForValidListAndQueue+0x64>)
 8004d76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d78:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <prvCheckForValidListAndQueue+0x70>)
 8004d7a:	4a10      	ldr	r2, [pc, #64]	; (8004dbc <prvCheckForValidListAndQueue+0x68>)
 8004d7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <prvCheckForValidListAndQueue+0x74>)
 8004d84:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <prvCheckForValidListAndQueue+0x78>)
 8004d86:	210c      	movs	r1, #12
 8004d88:	200a      	movs	r0, #10
 8004d8a:	f7fd fd91 	bl	80028b0 <xQueueGenericCreateStatic>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <prvCheckForValidListAndQueue+0x60>)
 8004d92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d94:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <prvCheckForValidListAndQueue+0x60>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <prvCheckForValidListAndQueue+0x60>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	490b      	ldr	r1, [pc, #44]	; (8004dd0 <prvCheckForValidListAndQueue+0x7c>)
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fc5c 	bl	8003660 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da8:	f000 f974 	bl	8005094 <vPortExitCritical>
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000928 	.word	0x20000928
 8004db8:	200008f8 	.word	0x200008f8
 8004dbc:	2000090c 	.word	0x2000090c
 8004dc0:	20000920 	.word	0x20000920
 8004dc4:	20000924 	.word	0x20000924
 8004dc8:	200009ac 	.word	0x200009ac
 8004dcc:	20000934 	.word	0x20000934
 8004dd0:	080060c4 	.word	0x080060c4

08004dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3b04      	subs	r3, #4
 8004de4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b04      	subs	r3, #4
 8004df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f023 0201 	bic.w	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b04      	subs	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e04:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <pxPortInitialiseStack+0x64>)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3b14      	subs	r3, #20
 8004e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3b04      	subs	r3, #4
 8004e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f06f 0202 	mvn.w	r2, #2
 8004e22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3b20      	subs	r3, #32
 8004e28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	08004e3d 	.word	0x08004e3d

08004e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <prvTaskExitError+0x54>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d00a      	beq.n	8004e66 <prvTaskExitError+0x2a>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <prvTaskExitError+0x28>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60bb      	str	r3, [r7, #8]
}
 8004e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e7a:	bf00      	nop
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0fc      	beq.n	8004e7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	2000000c 	.word	0x2000000c
	...

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	; (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b46      	ldr	r3, [pc, #280]	; (8005010 <xPortStartScheduler+0x120>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a46      	ldr	r2, [pc, #280]	; (8005014 <xPortStartScheduler+0x124>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10a      	bne.n	8004f16 <xPortStartScheduler+0x26>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	613b      	str	r3, [r7, #16]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f16:	4b3e      	ldr	r3, [pc, #248]	; (8005010 <xPortStartScheduler+0x120>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <xPortStartScheduler+0x128>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10a      	bne.n	8004f36 <xPortStartScheduler+0x46>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60fb      	str	r3, [r7, #12]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <xPortStartScheduler+0x12c>)
 8004f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	22ff      	movs	r2, #255	; 0xff
 8004f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <xPortStartScheduler+0x130>)
 8004f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <xPortStartScheduler+0x134>)
 8004f60:	2207      	movs	r2, #7
 8004f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f64:	e009      	b.n	8004f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f66:	4b2f      	ldr	r3, [pc, #188]	; (8005024 <xPortStartScheduler+0x134>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <xPortStartScheduler+0x134>)
 8004f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d0ef      	beq.n	8004f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <xPortStartScheduler+0x134>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1c3 0307 	rsb	r3, r3, #7
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d00a      	beq.n	8004fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60bb      	str	r3, [r7, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <xPortStartScheduler+0x134>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <xPortStartScheduler+0x134>)
 8004fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <xPortStartScheduler+0x134>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <xPortStartScheduler+0x134>)
 8004fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fc6:	4b18      	ldr	r3, [pc, #96]	; (8005028 <xPortStartScheduler+0x138>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a17      	ldr	r2, [pc, #92]	; (8005028 <xPortStartScheduler+0x138>)
 8004fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <xPortStartScheduler+0x138>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	; (8005028 <xPortStartScheduler+0x138>)
 8004fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fde:	f000 f8dd 	bl	800519c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <xPortStartScheduler+0x13c>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fe8:	f000 f8fc 	bl	80051e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <xPortStartScheduler+0x140>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <xPortStartScheduler+0x140>)
 8004ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ff8:	f7ff ff66 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ffc:	f7fe ff2e 	bl	8003e5c <vTaskSwitchContext>
	prvTaskExitError();
 8005000:	f7ff ff1c 	bl	8004e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000ed00 	.word	0xe000ed00
 8005014:	410fc271 	.word	0x410fc271
 8005018:	410fc270 	.word	0x410fc270
 800501c:	e000e400 	.word	0xe000e400
 8005020:	200009f4 	.word	0x200009f4
 8005024:	200009f8 	.word	0x200009f8
 8005028:	e000ed20 	.word	0xe000ed20
 800502c:	2000000c 	.word	0x2000000c
 8005030:	e000ef34 	.word	0xe000ef34

08005034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	607b      	str	r3, [r7, #4]
}
 800504c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <vPortEnterCritical+0x58>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a0d      	ldr	r2, [pc, #52]	; (800508c <vPortEnterCritical+0x58>)
 8005056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <vPortEnterCritical+0x58>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10f      	bne.n	8005080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <vPortEnterCritical+0x5c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <vPortEnterCritical+0x4c>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	603b      	str	r3, [r7, #0]
}
 800507c:	bf00      	nop
 800507e:	e7fe      	b.n	800507e <vPortEnterCritical+0x4a>
	}
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	2000000c 	.word	0x2000000c
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <vPortExitCritical+0x50>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <vPortExitCritical+0x24>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	607b      	str	r3, [r7, #4]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <vPortExitCritical+0x50>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3b01      	subs	r3, #1
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <vPortExitCritical+0x50>)
 80050c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <vPortExitCritical+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <vPortExitCritical+0x42>
 80050ca:	2300      	movs	r3, #0
 80050cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f383 8811 	msr	BASEPRI, r3
}
 80050d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	2000000c 	.word	0x2000000c
	...

080050f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050f0:	f3ef 8009 	mrs	r0, PSP
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	4b15      	ldr	r3, [pc, #84]	; (8005150 <pxCurrentTCBConst>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f01e 0f10 	tst.w	lr, #16
 8005100:	bf08      	it	eq
 8005102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f7fe fe9c 	bl	8003e5c <vTaskSwitchContext>
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	bc09      	pop	{r0, r3}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	f01e 0f10 	tst.w	lr, #16
 800513a:	bf08      	it	eq
 800513c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005140:	f380 8809 	msr	PSP, r0
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst>:
 8005150:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005172:	f7fe fdbb 	bl	8003cec <xTaskIncrementTick>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <xPortSysTickHandler+0x40>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <vPortSetupTimerInterrupt+0x38>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <vPortSetupTimerInterrupt+0x3c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <vPortSetupTimerInterrupt+0x40>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <vPortSetupTimerInterrupt+0x44>)
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010
 80051d4:	e000e018 	.word	0xe000e018
 80051d8:	20000000 	.word	0x20000000
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	e000e014 	.word	0xe000e014

080051e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051f4 <vPortEnableVFP+0x10>
 80051e8:	6801      	ldr	r1, [r0, #0]
 80051ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051ee:	6001      	str	r1, [r0, #0]
 80051f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051f2:	bf00      	nop
 80051f4:	e000ed88 	.word	0xe000ed88

080051f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051fe:	f3ef 8305 	mrs	r3, IPSR
 8005202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	d914      	bls.n	8005234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <vPortValidateInterruptPriority+0x70>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005214:	4b15      	ldr	r3, [pc, #84]	; (800526c <vPortValidateInterruptPriority+0x74>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	7afa      	ldrb	r2, [r7, #11]
 800521a:	429a      	cmp	r2, r3
 800521c:	d20a      	bcs.n	8005234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <vPortValidateInterruptPriority+0x78>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <vPortValidateInterruptPriority+0x7c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d90a      	bls.n	800525a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	603b      	str	r3, [r7, #0]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <vPortValidateInterruptPriority+0x60>
	}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	e000e3f0 	.word	0xe000e3f0
 800526c:	200009f4 	.word	0x200009f4
 8005270:	e000ed0c 	.word	0xe000ed0c
 8005274:	200009f8 	.word	0x200009f8

08005278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005284:	f7fe fc78 	bl	8003b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005288:	4b5b      	ldr	r3, [pc, #364]	; (80053f8 <pvPortMalloc+0x180>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005290:	f000 f920 	bl	80054d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005294:	4b59      	ldr	r3, [pc, #356]	; (80053fc <pvPortMalloc+0x184>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8093 	bne.w	80053c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01d      	beq.n	80052e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052a8:	2208      	movs	r2, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d014      	beq.n	80052e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	3308      	adds	r3, #8
 80052c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <pvPortMalloc+0x6c>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	617b      	str	r3, [r7, #20]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d06e      	beq.n	80053c8 <pvPortMalloc+0x150>
 80052ea:	4b45      	ldr	r3, [pc, #276]	; (8005400 <pvPortMalloc+0x188>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d869      	bhi.n	80053c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052f4:	4b43      	ldr	r3, [pc, #268]	; (8005404 <pvPortMalloc+0x18c>)
 80052f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052f8:	4b42      	ldr	r3, [pc, #264]	; (8005404 <pvPortMalloc+0x18c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fe:	e004      	b.n	800530a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <pvPortMalloc+0xa4>
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f1      	bne.n	8005300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800531c:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <pvPortMalloc+0x180>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	429a      	cmp	r2, r3
 8005324:	d050      	beq.n	80053c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2208      	movs	r2, #8
 800532c:	4413      	add	r3, r2
 800532e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	2308      	movs	r3, #8
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	429a      	cmp	r2, r3
 8005346:	d91f      	bls.n	8005388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <pvPortMalloc+0xf8>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	613b      	str	r3, [r7, #16]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1ad2      	subs	r2, r2, r3
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005382:	69b8      	ldr	r0, [r7, #24]
 8005384:	f000 f908 	bl	8005598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <pvPortMalloc+0x188>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <pvPortMalloc+0x188>)
 8005394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <pvPortMalloc+0x188>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <pvPortMalloc+0x190>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d203      	bcs.n	80053aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <pvPortMalloc+0x188>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a18      	ldr	r2, [pc, #96]	; (8005408 <pvPortMalloc+0x190>)
 80053a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <pvPortMalloc+0x184>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053be:	4b13      	ldr	r3, [pc, #76]	; (800540c <pvPortMalloc+0x194>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a11      	ldr	r2, [pc, #68]	; (800540c <pvPortMalloc+0x194>)
 80053c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053c8:	f7fe fbe4 	bl	8003b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <pvPortMalloc+0x174>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60fb      	str	r3, [r7, #12]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <pvPortMalloc+0x172>
	return pvReturn;
 80053ec:	69fb      	ldr	r3, [r7, #28]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20004604 	.word	0x20004604
 80053fc:	20004618 	.word	0x20004618
 8005400:	20004608 	.word	0x20004608
 8005404:	200045fc 	.word	0x200045fc
 8005408:	2000460c 	.word	0x2000460c
 800540c:	20004610 	.word	0x20004610

08005410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d04d      	beq.n	80054be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005422:	2308      	movs	r3, #8
 8005424:	425b      	negs	r3, r3
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <vPortFree+0xb8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <vPortFree+0x44>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60fb      	str	r3, [r7, #12]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <vPortFree+0x62>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60bb      	str	r3, [r7, #8]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <vPortFree+0xb8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01e      	beq.n	80054be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11a      	bne.n	80054be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <vPortFree+0xb8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005498:	f7fe fb6e 	bl	8003b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <vPortFree+0xbc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <vPortFree+0xbc>)
 80054a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f000 f874 	bl	8005598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <vPortFree+0xc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	4a06      	ldr	r2, [pc, #24]	; (80054d0 <vPortFree+0xc0>)
 80054b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054ba:	f7fe fb6b 	bl	8003b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20004618 	.word	0x20004618
 80054cc:	20004608 	.word	0x20004608
 80054d0:	20004614 	.word	0x20004614

080054d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054e0:	4b27      	ldr	r3, [pc, #156]	; (8005580 <prvHeapInit+0xac>)
 80054e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3307      	adds	r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <prvHeapInit+0xac>)
 8005504:	4413      	add	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800550c:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <prvHeapInit+0xb0>)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <prvHeapInit+0xb0>)
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4413      	add	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005520:	2208      	movs	r2, #8
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <prvHeapInit+0xb4>)
 8005534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <prvHeapInit+0xb4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <prvHeapInit+0xb4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <prvHeapInit+0xb4>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <prvHeapInit+0xb8>)
 8005562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <prvHeapInit+0xbc>)
 800556a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <prvHeapInit+0xc0>)
 800556e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	200009fc 	.word	0x200009fc
 8005584:	200045fc 	.word	0x200045fc
 8005588:	20004604 	.word	0x20004604
 800558c:	2000460c 	.word	0x2000460c
 8005590:	20004608 	.word	0x20004608
 8005594:	20004618 	.word	0x20004618

08005598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <prvInsertBlockIntoFreeList+0xac>)
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e002      	b.n	80055ac <prvInsertBlockIntoFreeList+0x14>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d8f7      	bhi.n	80055a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4413      	add	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d108      	bne.n	80055da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	441a      	add	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	441a      	add	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d118      	bne.n	8005620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <prvInsertBlockIntoFreeList+0xb0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d00d      	beq.n	8005616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e008      	b.n	8005628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <prvInsertBlockIntoFreeList+0xb0>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e003      	b.n	8005628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d002      	beq.n	8005636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	200045fc 	.word	0x200045fc
 8005648:	20004604 	.word	0x20004604

0800564c <__errno>:
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <__errno+0x8>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000010 	.word	0x20000010

08005658 <__libc_init_array>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	4d0d      	ldr	r5, [pc, #52]	; (8005690 <__libc_init_array+0x38>)
 800565c:	4c0d      	ldr	r4, [pc, #52]	; (8005694 <__libc_init_array+0x3c>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	2600      	movs	r6, #0
 8005664:	42a6      	cmp	r6, r4
 8005666:	d109      	bne.n	800567c <__libc_init_array+0x24>
 8005668:	4d0b      	ldr	r5, [pc, #44]	; (8005698 <__libc_init_array+0x40>)
 800566a:	4c0c      	ldr	r4, [pc, #48]	; (800569c <__libc_init_array+0x44>)
 800566c:	f000 fc8e 	bl	8005f8c <_init>
 8005670:	1b64      	subs	r4, r4, r5
 8005672:	10a4      	asrs	r4, r4, #2
 8005674:	2600      	movs	r6, #0
 8005676:	42a6      	cmp	r6, r4
 8005678:	d105      	bne.n	8005686 <__libc_init_array+0x2e>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005680:	4798      	blx	r3
 8005682:	3601      	adds	r6, #1
 8005684:	e7ee      	b.n	8005664 <__libc_init_array+0xc>
 8005686:	f855 3b04 	ldr.w	r3, [r5], #4
 800568a:	4798      	blx	r3
 800568c:	3601      	adds	r6, #1
 800568e:	e7f2      	b.n	8005676 <__libc_init_array+0x1e>
 8005690:	08006120 	.word	0x08006120
 8005694:	08006120 	.word	0x08006120
 8005698:	08006120 	.word	0x08006120
 800569c:	08006124 	.word	0x08006124

080056a0 <memcpy>:
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a8:	d100      	bne.n	80056ac <memcpy+0xc>
 80056aa:	4770      	bx	lr
 80056ac:	b510      	push	{r4, lr}
 80056ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b6:	4291      	cmp	r1, r2
 80056b8:	d1f9      	bne.n	80056ae <memcpy+0xe>
 80056ba:	bd10      	pop	{r4, pc}

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <siprintf>:
 80056cc:	b40e      	push	{r1, r2, r3}
 80056ce:	b500      	push	{lr}
 80056d0:	b09c      	sub	sp, #112	; 0x70
 80056d2:	ab1d      	add	r3, sp, #116	; 0x74
 80056d4:	9002      	str	r0, [sp, #8]
 80056d6:	9006      	str	r0, [sp, #24]
 80056d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056dc:	4809      	ldr	r0, [pc, #36]	; (8005704 <siprintf+0x38>)
 80056de:	9107      	str	r1, [sp, #28]
 80056e0:	9104      	str	r1, [sp, #16]
 80056e2:	4909      	ldr	r1, [pc, #36]	; (8005708 <siprintf+0x3c>)
 80056e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056e8:	9105      	str	r1, [sp, #20]
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	a902      	add	r1, sp, #8
 80056f0:	f000 f868 	bl	80057c4 <_svfiprintf_r>
 80056f4:	9b02      	ldr	r3, [sp, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	b01c      	add	sp, #112	; 0x70
 80056fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005700:	b003      	add	sp, #12
 8005702:	4770      	bx	lr
 8005704:	20000010 	.word	0x20000010
 8005708:	ffff0208 	.word	0xffff0208

0800570c <__ssputs_r>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	688e      	ldr	r6, [r1, #8]
 8005712:	429e      	cmp	r6, r3
 8005714:	4682      	mov	sl, r0
 8005716:	460c      	mov	r4, r1
 8005718:	4690      	mov	r8, r2
 800571a:	461f      	mov	r7, r3
 800571c:	d838      	bhi.n	8005790 <__ssputs_r+0x84>
 800571e:	898a      	ldrh	r2, [r1, #12]
 8005720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005724:	d032      	beq.n	800578c <__ssputs_r+0x80>
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	6909      	ldr	r1, [r1, #16]
 800572a:	eba5 0901 	sub.w	r9, r5, r1
 800572e:	6965      	ldr	r5, [r4, #20]
 8005730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005738:	3301      	adds	r3, #1
 800573a:	444b      	add	r3, r9
 800573c:	106d      	asrs	r5, r5, #1
 800573e:	429d      	cmp	r5, r3
 8005740:	bf38      	it	cc
 8005742:	461d      	movcc	r5, r3
 8005744:	0553      	lsls	r3, r2, #21
 8005746:	d531      	bpl.n	80057ac <__ssputs_r+0xa0>
 8005748:	4629      	mov	r1, r5
 800574a:	f000 fb55 	bl	8005df8 <_malloc_r>
 800574e:	4606      	mov	r6, r0
 8005750:	b950      	cbnz	r0, 8005768 <__ssputs_r+0x5c>
 8005752:	230c      	movs	r3, #12
 8005754:	f8ca 3000 	str.w	r3, [sl]
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	6921      	ldr	r1, [r4, #16]
 800576a:	464a      	mov	r2, r9
 800576c:	f7ff ff98 	bl	80056a0 <memcpy>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	6126      	str	r6, [r4, #16]
 800577e:	6165      	str	r5, [r4, #20]
 8005780:	444e      	add	r6, r9
 8005782:	eba5 0509 	sub.w	r5, r5, r9
 8005786:	6026      	str	r6, [r4, #0]
 8005788:	60a5      	str	r5, [r4, #8]
 800578a:	463e      	mov	r6, r7
 800578c:	42be      	cmp	r6, r7
 800578e:	d900      	bls.n	8005792 <__ssputs_r+0x86>
 8005790:	463e      	mov	r6, r7
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	4632      	mov	r2, r6
 8005796:	4641      	mov	r1, r8
 8005798:	f000 faa8 	bl	8005cec <memmove>
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	1b9b      	subs	r3, r3, r6
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	4433      	add	r3, r6
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	2000      	movs	r0, #0
 80057aa:	e7db      	b.n	8005764 <__ssputs_r+0x58>
 80057ac:	462a      	mov	r2, r5
 80057ae:	f000 fb97 	bl	8005ee0 <_realloc_r>
 80057b2:	4606      	mov	r6, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1e1      	bne.n	800577c <__ssputs_r+0x70>
 80057b8:	6921      	ldr	r1, [r4, #16]
 80057ba:	4650      	mov	r0, sl
 80057bc:	f000 fab0 	bl	8005d20 <_free_r>
 80057c0:	e7c7      	b.n	8005752 <__ssputs_r+0x46>
	...

080057c4 <_svfiprintf_r>:
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	4698      	mov	r8, r3
 80057ca:	898b      	ldrh	r3, [r1, #12]
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	b09d      	sub	sp, #116	; 0x74
 80057d0:	4607      	mov	r7, r0
 80057d2:	460d      	mov	r5, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	d50e      	bpl.n	80057f6 <_svfiprintf_r+0x32>
 80057d8:	690b      	ldr	r3, [r1, #16]
 80057da:	b963      	cbnz	r3, 80057f6 <_svfiprintf_r+0x32>
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	f000 fb0b 	bl	8005df8 <_malloc_r>
 80057e2:	6028      	str	r0, [r5, #0]
 80057e4:	6128      	str	r0, [r5, #16]
 80057e6:	b920      	cbnz	r0, 80057f2 <_svfiprintf_r+0x2e>
 80057e8:	230c      	movs	r3, #12
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e0d1      	b.n	8005996 <_svfiprintf_r+0x1d2>
 80057f2:	2340      	movs	r3, #64	; 0x40
 80057f4:	616b      	str	r3, [r5, #20]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9309      	str	r3, [sp, #36]	; 0x24
 80057fa:	2320      	movs	r3, #32
 80057fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005800:	f8cd 800c 	str.w	r8, [sp, #12]
 8005804:	2330      	movs	r3, #48	; 0x30
 8005806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059b0 <_svfiprintf_r+0x1ec>
 800580a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800580e:	f04f 0901 	mov.w	r9, #1
 8005812:	4623      	mov	r3, r4
 8005814:	469a      	mov	sl, r3
 8005816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581a:	b10a      	cbz	r2, 8005820 <_svfiprintf_r+0x5c>
 800581c:	2a25      	cmp	r2, #37	; 0x25
 800581e:	d1f9      	bne.n	8005814 <_svfiprintf_r+0x50>
 8005820:	ebba 0b04 	subs.w	fp, sl, r4
 8005824:	d00b      	beq.n	800583e <_svfiprintf_r+0x7a>
 8005826:	465b      	mov	r3, fp
 8005828:	4622      	mov	r2, r4
 800582a:	4629      	mov	r1, r5
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ff6d 	bl	800570c <__ssputs_r>
 8005832:	3001      	adds	r0, #1
 8005834:	f000 80aa 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800583a:	445a      	add	r2, fp
 800583c:	9209      	str	r2, [sp, #36]	; 0x24
 800583e:	f89a 3000 	ldrb.w	r3, [sl]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80a2 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005848:	2300      	movs	r3, #0
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005852:	f10a 0a01 	add.w	sl, sl, #1
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	9307      	str	r3, [sp, #28]
 800585a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800585e:	931a      	str	r3, [sp, #104]	; 0x68
 8005860:	4654      	mov	r4, sl
 8005862:	2205      	movs	r2, #5
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	4851      	ldr	r0, [pc, #324]	; (80059b0 <_svfiprintf_r+0x1ec>)
 800586a:	f7fa fcc1 	bl	80001f0 <memchr>
 800586e:	9a04      	ldr	r2, [sp, #16]
 8005870:	b9d8      	cbnz	r0, 80058aa <_svfiprintf_r+0xe6>
 8005872:	06d0      	lsls	r0, r2, #27
 8005874:	bf44      	itt	mi
 8005876:	2320      	movmi	r3, #32
 8005878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587c:	0711      	lsls	r1, r2, #28
 800587e:	bf44      	itt	mi
 8005880:	232b      	movmi	r3, #43	; 0x2b
 8005882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005886:	f89a 3000 	ldrb.w	r3, [sl]
 800588a:	2b2a      	cmp	r3, #42	; 0x2a
 800588c:	d015      	beq.n	80058ba <_svfiprintf_r+0xf6>
 800588e:	9a07      	ldr	r2, [sp, #28]
 8005890:	4654      	mov	r4, sl
 8005892:	2000      	movs	r0, #0
 8005894:	f04f 0c0a 	mov.w	ip, #10
 8005898:	4621      	mov	r1, r4
 800589a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800589e:	3b30      	subs	r3, #48	; 0x30
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	d94e      	bls.n	8005942 <_svfiprintf_r+0x17e>
 80058a4:	b1b0      	cbz	r0, 80058d4 <_svfiprintf_r+0x110>
 80058a6:	9207      	str	r2, [sp, #28]
 80058a8:	e014      	b.n	80058d4 <_svfiprintf_r+0x110>
 80058aa:	eba0 0308 	sub.w	r3, r0, r8
 80058ae:	fa09 f303 	lsl.w	r3, r9, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	46a2      	mov	sl, r4
 80058b8:	e7d2      	b.n	8005860 <_svfiprintf_r+0x9c>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	1d19      	adds	r1, r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9103      	str	r1, [sp, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfbb      	ittet	lt
 80058c6:	425b      	neglt	r3, r3
 80058c8:	f042 0202 	orrlt.w	r2, r2, #2
 80058cc:	9307      	strge	r3, [sp, #28]
 80058ce:	9307      	strlt	r3, [sp, #28]
 80058d0:	bfb8      	it	lt
 80058d2:	9204      	strlt	r2, [sp, #16]
 80058d4:	7823      	ldrb	r3, [r4, #0]
 80058d6:	2b2e      	cmp	r3, #46	; 0x2e
 80058d8:	d10c      	bne.n	80058f4 <_svfiprintf_r+0x130>
 80058da:	7863      	ldrb	r3, [r4, #1]
 80058dc:	2b2a      	cmp	r3, #42	; 0x2a
 80058de:	d135      	bne.n	800594c <_svfiprintf_r+0x188>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	9203      	str	r2, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bfb8      	it	lt
 80058ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f0:	3402      	adds	r4, #2
 80058f2:	9305      	str	r3, [sp, #20]
 80058f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059c0 <_svfiprintf_r+0x1fc>
 80058f8:	7821      	ldrb	r1, [r4, #0]
 80058fa:	2203      	movs	r2, #3
 80058fc:	4650      	mov	r0, sl
 80058fe:	f7fa fc77 	bl	80001f0 <memchr>
 8005902:	b140      	cbz	r0, 8005916 <_svfiprintf_r+0x152>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	eba0 000a 	sub.w	r0, r0, sl
 800590a:	fa03 f000 	lsl.w	r0, r3, r0
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	4303      	orrs	r3, r0
 8005912:	3401      	adds	r4, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591a:	4826      	ldr	r0, [pc, #152]	; (80059b4 <_svfiprintf_r+0x1f0>)
 800591c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005920:	2206      	movs	r2, #6
 8005922:	f7fa fc65 	bl	80001f0 <memchr>
 8005926:	2800      	cmp	r0, #0
 8005928:	d038      	beq.n	800599c <_svfiprintf_r+0x1d8>
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <_svfiprintf_r+0x1f4>)
 800592c:	bb1b      	cbnz	r3, 8005976 <_svfiprintf_r+0x1b2>
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	3308      	adds	r3, #8
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	4433      	add	r3, r6
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	e767      	b.n	8005812 <_svfiprintf_r+0x4e>
 8005942:	fb0c 3202 	mla	r2, ip, r2, r3
 8005946:	460c      	mov	r4, r1
 8005948:	2001      	movs	r0, #1
 800594a:	e7a5      	b.n	8005898 <_svfiprintf_r+0xd4>
 800594c:	2300      	movs	r3, #0
 800594e:	3401      	adds	r4, #1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4619      	mov	r1, r3
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4620      	mov	r0, r4
 800595a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800595e:	3a30      	subs	r2, #48	; 0x30
 8005960:	2a09      	cmp	r2, #9
 8005962:	d903      	bls.n	800596c <_svfiprintf_r+0x1a8>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0c5      	beq.n	80058f4 <_svfiprintf_r+0x130>
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	e7c3      	b.n	80058f4 <_svfiprintf_r+0x130>
 800596c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005970:	4604      	mov	r4, r0
 8005972:	2301      	movs	r3, #1
 8005974:	e7f0      	b.n	8005958 <_svfiprintf_r+0x194>
 8005976:	ab03      	add	r3, sp, #12
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	462a      	mov	r2, r5
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <_svfiprintf_r+0x1f8>)
 800597e:	a904      	add	r1, sp, #16
 8005980:	4638      	mov	r0, r7
 8005982:	f3af 8000 	nop.w
 8005986:	1c42      	adds	r2, r0, #1
 8005988:	4606      	mov	r6, r0
 800598a:	d1d6      	bne.n	800593a <_svfiprintf_r+0x176>
 800598c:	89ab      	ldrh	r3, [r5, #12]
 800598e:	065b      	lsls	r3, r3, #25
 8005990:	f53f af2c 	bmi.w	80057ec <_svfiprintf_r+0x28>
 8005994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005996:	b01d      	add	sp, #116	; 0x74
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	462a      	mov	r2, r5
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <_svfiprintf_r+0x1f8>)
 80059a4:	a904      	add	r1, sp, #16
 80059a6:	4638      	mov	r0, r7
 80059a8:	f000 f87a 	bl	8005aa0 <_printf_i>
 80059ac:	e7eb      	b.n	8005986 <_svfiprintf_r+0x1c2>
 80059ae:	bf00      	nop
 80059b0:	080060e4 	.word	0x080060e4
 80059b4:	080060ee 	.word	0x080060ee
 80059b8:	00000000 	.word	0x00000000
 80059bc:	0800570d 	.word	0x0800570d
 80059c0:	080060ea 	.word	0x080060ea

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4699      	mov	r9, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a10:	1e13      	subs	r3, r2, #0
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	68e5      	ldr	r5, [r4, #12]
 8005a2e:	6832      	ldr	r2, [r6, #0]
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	bf08      	it	eq
 8005a38:	1aad      	subeq	r5, r5, r2
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	; 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	7e0f      	ldrb	r7, [r1, #24]
 8005aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa8:	2f78      	cmp	r7, #120	; 0x78
 8005aaa:	4691      	mov	r9, r2
 8005aac:	4680      	mov	r8, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	; 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d8 	beq.w	8005c72 <_printf_i+0x1d2>
 8005ac2:	2f58      	cmp	r7, #88	; 0x58
 8005ac4:	f000 80a3 	beq.w	8005c0e <_printf_i+0x16e>
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a101      	add	r1, pc, #4	; (adr r1, 8005ae0 <_printf_i+0x40>)
 8005adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c59 	.word	0x08005c59
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005c3b 	.word	0x08005c3b
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c7b 	.word	0x08005c7b
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c43 	.word	0x08005c43
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	602a      	str	r2, [r5, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0a3      	b.n	8005c94 <_printf_i+0x1f4>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	6829      	ldr	r1, [r5, #0]
 8005b50:	0606      	lsls	r6, r0, #24
 8005b52:	f101 0304 	add.w	r3, r1, #4
 8005b56:	d50a      	bpl.n	8005b6e <_printf_i+0xce>
 8005b58:	680e      	ldr	r6, [r1, #0]
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xc8>
 8005b60:	232d      	movs	r3, #45	; 0x2d
 8005b62:	4276      	negs	r6, r6
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	485e      	ldr	r0, [pc, #376]	; (8005ce4 <_printf_i+0x244>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e019      	b.n	8005ba2 <_printf_i+0x102>
 8005b6e:	680e      	ldr	r6, [r1, #0]
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b76:	bf18      	it	ne
 8005b78:	b236      	sxthne	r6, r6
 8005b7a:	e7ef      	b.n	8005b5c <_printf_i+0xbc>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	6029      	str	r1, [r5, #0]
 8005b84:	0601      	lsls	r1, r0, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xec>
 8005b88:	681e      	ldr	r6, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0xf2>
 8005b8c:	0646      	lsls	r6, r0, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xe8>
 8005b90:	881e      	ldrh	r6, [r3, #0]
 8005b92:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <_printf_i+0x244>)
 8005b94:	2f6f      	cmp	r7, #111	; 0x6f
 8005b96:	bf0c      	ite	eq
 8005b98:	2308      	moveq	r3, #8
 8005b9a:	230a      	movne	r3, #10
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ba2:	6865      	ldr	r5, [r4, #4]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	bfa2      	ittt	ge
 8005baa:	6821      	ldrge	r1, [r4, #0]
 8005bac:	f021 0104 	bicge.w	r1, r1, #4
 8005bb0:	6021      	strge	r1, [r4, #0]
 8005bb2:	b90e      	cbnz	r6, 8005bb8 <_printf_i+0x118>
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	d04d      	beq.n	8005c54 <_printf_i+0x1b4>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8005bc2:	5dc7      	ldrb	r7, [r0, r7]
 8005bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc8:	4637      	mov	r7, r6
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	460e      	mov	r6, r1
 8005bce:	d9f4      	bls.n	8005bba <_printf_i+0x11a>
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d10b      	bne.n	8005bec <_printf_i+0x14c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07de      	lsls	r6, r3, #31
 8005bd8:	d508      	bpl.n	8005bec <_printf_i+0x14c>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6861      	ldr	r1, [r4, #4]
 8005bde:	4299      	cmp	r1, r3
 8005be0:	bfde      	ittt	le
 8005be2:	2330      	movle	r3, #48	; 0x30
 8005be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bec:	1b52      	subs	r2, r2, r5
 8005bee:	6122      	str	r2, [r4, #16]
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	aa03      	add	r2, sp, #12
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fee2 	bl	80059c4 <_printf_common>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d14c      	bne.n	8005c9e <_printf_i+0x1fe>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	b004      	add	sp, #16
 8005c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0e:	4835      	ldr	r0, [pc, #212]	; (8005ce4 <_printf_i+0x244>)
 8005c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c1c:	6029      	str	r1, [r5, #0]
 8005c1e:	061d      	lsls	r5, r3, #24
 8005c20:	d514      	bpl.n	8005c4c <_printf_i+0x1ac>
 8005c22:	07df      	lsls	r7, r3, #31
 8005c24:	bf44      	itt	mi
 8005c26:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2a:	6023      	strmi	r3, [r4, #0]
 8005c2c:	b91e      	cbnz	r6, 8005c36 <_printf_i+0x196>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f023 0320 	bic.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	2310      	movs	r3, #16
 8005c38:	e7b0      	b.n	8005b9c <_printf_i+0xfc>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2378      	movs	r3, #120	; 0x78
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <_printf_i+0x248>)
 8005c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4a:	e7e3      	b.n	8005c14 <_printf_i+0x174>
 8005c4c:	0659      	lsls	r1, r3, #25
 8005c4e:	bf48      	it	mi
 8005c50:	b2b6      	uxthmi	r6, r6
 8005c52:	e7e6      	b.n	8005c22 <_printf_i+0x182>
 8005c54:	4615      	mov	r5, r2
 8005c56:	e7bb      	b.n	8005bd0 <_printf_i+0x130>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	6826      	ldr	r6, [r4, #0]
 8005c5c:	6961      	ldr	r1, [r4, #20]
 8005c5e:	1d18      	adds	r0, r3, #4
 8005c60:	6028      	str	r0, [r5, #0]
 8005c62:	0635      	lsls	r5, r6, #24
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	d501      	bpl.n	8005c6c <_printf_i+0x1cc>
 8005c68:	6019      	str	r1, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <_printf_i+0x1d2>
 8005c6c:	0670      	lsls	r0, r6, #25
 8005c6e:	d5fb      	bpl.n	8005c68 <_printf_i+0x1c8>
 8005c70:	8019      	strh	r1, [r3, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	4615      	mov	r5, r2
 8005c78:	e7ba      	b.n	8005bf0 <_printf_i+0x150>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7fa fab2 	bl	80001f0 <memchr>
 8005c8c:	b108      	cbz	r0, 8005c92 <_printf_i+0x1f2>
 8005c8e:	1b40      	subs	r0, r0, r5
 8005c90:	6060      	str	r0, [r4, #4]
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	2300      	movs	r3, #0
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	e7a8      	b.n	8005bf0 <_printf_i+0x150>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d0ab      	beq.n	8005c04 <_printf_i+0x164>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	079b      	lsls	r3, r3, #30
 8005cb0:	d413      	bmi.n	8005cda <_printf_i+0x23a>
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bfb8      	it	lt
 8005cba:	4618      	movlt	r0, r3
 8005cbc:	e7a4      	b.n	8005c08 <_printf_i+0x168>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	47d0      	blx	sl
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d09b      	beq.n	8005c04 <_printf_i+0x164>
 8005ccc:	3501      	adds	r5, #1
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	9903      	ldr	r1, [sp, #12]
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dcf2      	bgt.n	8005cbe <_printf_i+0x21e>
 8005cd8:	e7eb      	b.n	8005cb2 <_printf_i+0x212>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	f104 0619 	add.w	r6, r4, #25
 8005ce0:	e7f5      	b.n	8005cce <_printf_i+0x22e>
 8005ce2:	bf00      	nop
 8005ce4:	080060f5 	.word	0x080060f5
 8005ce8:	08006106 	.word	0x08006106

08005cec <memmove>:
 8005cec:	4288      	cmp	r0, r1
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	eb01 0402 	add.w	r4, r1, r2
 8005cf4:	d902      	bls.n	8005cfc <memmove+0x10>
 8005cf6:	4284      	cmp	r4, r0
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	d807      	bhi.n	8005d0c <memmove+0x20>
 8005cfc:	1e43      	subs	r3, r0, #1
 8005cfe:	42a1      	cmp	r1, r4
 8005d00:	d008      	beq.n	8005d14 <memmove+0x28>
 8005d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d0a:	e7f8      	b.n	8005cfe <memmove+0x12>
 8005d0c:	4402      	add	r2, r0
 8005d0e:	4601      	mov	r1, r0
 8005d10:	428a      	cmp	r2, r1
 8005d12:	d100      	bne.n	8005d16 <memmove+0x2a>
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d1e:	e7f7      	b.n	8005d10 <memmove+0x24>

08005d20 <_free_r>:
 8005d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d044      	beq.n	8005db0 <_free_r+0x90>
 8005d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2a:	9001      	str	r0, [sp, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d32:	bfb8      	it	lt
 8005d34:	18e4      	addlt	r4, r4, r3
 8005d36:	f000 f913 	bl	8005f60 <__malloc_lock>
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <_free_r+0x94>)
 8005d3c:	9801      	ldr	r0, [sp, #4]
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	b933      	cbnz	r3, 8005d50 <_free_r+0x30>
 8005d42:	6063      	str	r3, [r4, #4]
 8005d44:	6014      	str	r4, [r2, #0]
 8005d46:	b003      	add	sp, #12
 8005d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d4c:	f000 b90e 	b.w	8005f6c <__malloc_unlock>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d908      	bls.n	8005d66 <_free_r+0x46>
 8005d54:	6825      	ldr	r5, [r4, #0]
 8005d56:	1961      	adds	r1, r4, r5
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	bf01      	itttt	eq
 8005d5c:	6819      	ldreq	r1, [r3, #0]
 8005d5e:	685b      	ldreq	r3, [r3, #4]
 8005d60:	1949      	addeq	r1, r1, r5
 8005d62:	6021      	streq	r1, [r4, #0]
 8005d64:	e7ed      	b.n	8005d42 <_free_r+0x22>
 8005d66:	461a      	mov	r2, r3
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b10b      	cbz	r3, 8005d70 <_free_r+0x50>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d9fa      	bls.n	8005d66 <_free_r+0x46>
 8005d70:	6811      	ldr	r1, [r2, #0]
 8005d72:	1855      	adds	r5, r2, r1
 8005d74:	42a5      	cmp	r5, r4
 8005d76:	d10b      	bne.n	8005d90 <_free_r+0x70>
 8005d78:	6824      	ldr	r4, [r4, #0]
 8005d7a:	4421      	add	r1, r4
 8005d7c:	1854      	adds	r4, r2, r1
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	6011      	str	r1, [r2, #0]
 8005d82:	d1e0      	bne.n	8005d46 <_free_r+0x26>
 8005d84:	681c      	ldr	r4, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	6053      	str	r3, [r2, #4]
 8005d8a:	4421      	add	r1, r4
 8005d8c:	6011      	str	r1, [r2, #0]
 8005d8e:	e7da      	b.n	8005d46 <_free_r+0x26>
 8005d90:	d902      	bls.n	8005d98 <_free_r+0x78>
 8005d92:	230c      	movs	r3, #12
 8005d94:	6003      	str	r3, [r0, #0]
 8005d96:	e7d6      	b.n	8005d46 <_free_r+0x26>
 8005d98:	6825      	ldr	r5, [r4, #0]
 8005d9a:	1961      	adds	r1, r4, r5
 8005d9c:	428b      	cmp	r3, r1
 8005d9e:	bf04      	itt	eq
 8005da0:	6819      	ldreq	r1, [r3, #0]
 8005da2:	685b      	ldreq	r3, [r3, #4]
 8005da4:	6063      	str	r3, [r4, #4]
 8005da6:	bf04      	itt	eq
 8005da8:	1949      	addeq	r1, r1, r5
 8005daa:	6021      	streq	r1, [r4, #0]
 8005dac:	6054      	str	r4, [r2, #4]
 8005dae:	e7ca      	b.n	8005d46 <_free_r+0x26>
 8005db0:	b003      	add	sp, #12
 8005db2:	bd30      	pop	{r4, r5, pc}
 8005db4:	2000461c 	.word	0x2000461c

08005db8 <sbrk_aligned>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4e0e      	ldr	r6, [pc, #56]	; (8005df4 <sbrk_aligned+0x3c>)
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	6831      	ldr	r1, [r6, #0]
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	b911      	cbnz	r1, 8005dca <sbrk_aligned+0x12>
 8005dc4:	f000 f8bc 	bl	8005f40 <_sbrk_r>
 8005dc8:	6030      	str	r0, [r6, #0]
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 f8b7 	bl	8005f40 <_sbrk_r>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d00a      	beq.n	8005dec <sbrk_aligned+0x34>
 8005dd6:	1cc4      	adds	r4, r0, #3
 8005dd8:	f024 0403 	bic.w	r4, r4, #3
 8005ddc:	42a0      	cmp	r0, r4
 8005dde:	d007      	beq.n	8005df0 <sbrk_aligned+0x38>
 8005de0:	1a21      	subs	r1, r4, r0
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f8ac 	bl	8005f40 <_sbrk_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d101      	bne.n	8005df0 <sbrk_aligned+0x38>
 8005dec:	f04f 34ff 	mov.w	r4, #4294967295
 8005df0:	4620      	mov	r0, r4
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
 8005df4:	20004620 	.word	0x20004620

08005df8 <_malloc_r>:
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	1ccd      	adds	r5, r1, #3
 8005dfe:	f025 0503 	bic.w	r5, r5, #3
 8005e02:	3508      	adds	r5, #8
 8005e04:	2d0c      	cmp	r5, #12
 8005e06:	bf38      	it	cc
 8005e08:	250c      	movcc	r5, #12
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	db01      	blt.n	8005e14 <_malloc_r+0x1c>
 8005e10:	42a9      	cmp	r1, r5
 8005e12:	d905      	bls.n	8005e20 <_malloc_r+0x28>
 8005e14:	230c      	movs	r3, #12
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	2600      	movs	r6, #0
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e20:	4e2e      	ldr	r6, [pc, #184]	; (8005edc <_malloc_r+0xe4>)
 8005e22:	f000 f89d 	bl	8005f60 <__malloc_lock>
 8005e26:	6833      	ldr	r3, [r6, #0]
 8005e28:	461c      	mov	r4, r3
 8005e2a:	bb34      	cbnz	r4, 8005e7a <_malloc_r+0x82>
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f7ff ffc2 	bl	8005db8 <sbrk_aligned>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	4604      	mov	r4, r0
 8005e38:	d14d      	bne.n	8005ed6 <_malloc_r+0xde>
 8005e3a:	6834      	ldr	r4, [r6, #0]
 8005e3c:	4626      	mov	r6, r4
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	d140      	bne.n	8005ec4 <_malloc_r+0xcc>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	4631      	mov	r1, r6
 8005e46:	4638      	mov	r0, r7
 8005e48:	eb04 0803 	add.w	r8, r4, r3
 8005e4c:	f000 f878 	bl	8005f40 <_sbrk_r>
 8005e50:	4580      	cmp	r8, r0
 8005e52:	d13a      	bne.n	8005eca <_malloc_r+0xd2>
 8005e54:	6821      	ldr	r1, [r4, #0]
 8005e56:	3503      	adds	r5, #3
 8005e58:	1a6d      	subs	r5, r5, r1
 8005e5a:	f025 0503 	bic.w	r5, r5, #3
 8005e5e:	3508      	adds	r5, #8
 8005e60:	2d0c      	cmp	r5, #12
 8005e62:	bf38      	it	cc
 8005e64:	250c      	movcc	r5, #12
 8005e66:	4629      	mov	r1, r5
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f7ff ffa5 	bl	8005db8 <sbrk_aligned>
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d02b      	beq.n	8005eca <_malloc_r+0xd2>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	442b      	add	r3, r5
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	e00e      	b.n	8005e98 <_malloc_r+0xa0>
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	1b52      	subs	r2, r2, r5
 8005e7e:	d41e      	bmi.n	8005ebe <_malloc_r+0xc6>
 8005e80:	2a0b      	cmp	r2, #11
 8005e82:	d916      	bls.n	8005eb2 <_malloc_r+0xba>
 8005e84:	1961      	adds	r1, r4, r5
 8005e86:	42a3      	cmp	r3, r4
 8005e88:	6025      	str	r5, [r4, #0]
 8005e8a:	bf18      	it	ne
 8005e8c:	6059      	strne	r1, [r3, #4]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	bf08      	it	eq
 8005e92:	6031      	streq	r1, [r6, #0]
 8005e94:	5162      	str	r2, [r4, r5]
 8005e96:	604b      	str	r3, [r1, #4]
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f104 060b 	add.w	r6, r4, #11
 8005e9e:	f000 f865 	bl	8005f6c <__malloc_unlock>
 8005ea2:	f026 0607 	bic.w	r6, r6, #7
 8005ea6:	1d23      	adds	r3, r4, #4
 8005ea8:	1af2      	subs	r2, r6, r3
 8005eaa:	d0b6      	beq.n	8005e1a <_malloc_r+0x22>
 8005eac:	1b9b      	subs	r3, r3, r6
 8005eae:	50a3      	str	r3, [r4, r2]
 8005eb0:	e7b3      	b.n	8005e1a <_malloc_r+0x22>
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	bf0c      	ite	eq
 8005eb8:	6032      	streq	r2, [r6, #0]
 8005eba:	605a      	strne	r2, [r3, #4]
 8005ebc:	e7ec      	b.n	8005e98 <_malloc_r+0xa0>
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	6864      	ldr	r4, [r4, #4]
 8005ec2:	e7b2      	b.n	8005e2a <_malloc_r+0x32>
 8005ec4:	4634      	mov	r4, r6
 8005ec6:	6876      	ldr	r6, [r6, #4]
 8005ec8:	e7b9      	b.n	8005e3e <_malloc_r+0x46>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f000 f84c 	bl	8005f6c <__malloc_unlock>
 8005ed4:	e7a1      	b.n	8005e1a <_malloc_r+0x22>
 8005ed6:	6025      	str	r5, [r4, #0]
 8005ed8:	e7de      	b.n	8005e98 <_malloc_r+0xa0>
 8005eda:	bf00      	nop
 8005edc:	2000461c 	.word	0x2000461c

08005ee0 <_realloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	4614      	mov	r4, r2
 8005ee8:	460e      	mov	r6, r1
 8005eea:	b921      	cbnz	r1, 8005ef6 <_realloc_r+0x16>
 8005eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	f7ff bf81 	b.w	8005df8 <_malloc_r>
 8005ef6:	b92a      	cbnz	r2, 8005f04 <_realloc_r+0x24>
 8005ef8:	f7ff ff12 	bl	8005d20 <_free_r>
 8005efc:	4625      	mov	r5, r4
 8005efe:	4628      	mov	r0, r5
 8005f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f04:	f000 f838 	bl	8005f78 <_malloc_usable_size_r>
 8005f08:	4284      	cmp	r4, r0
 8005f0a:	4607      	mov	r7, r0
 8005f0c:	d802      	bhi.n	8005f14 <_realloc_r+0x34>
 8005f0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f12:	d812      	bhi.n	8005f3a <_realloc_r+0x5a>
 8005f14:	4621      	mov	r1, r4
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff ff6e 	bl	8005df8 <_malloc_r>
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d0ed      	beq.n	8005efe <_realloc_r+0x1e>
 8005f22:	42bc      	cmp	r4, r7
 8005f24:	4622      	mov	r2, r4
 8005f26:	4631      	mov	r1, r6
 8005f28:	bf28      	it	cs
 8005f2a:	463a      	movcs	r2, r7
 8005f2c:	f7ff fbb8 	bl	80056a0 <memcpy>
 8005f30:	4631      	mov	r1, r6
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fef4 	bl	8005d20 <_free_r>
 8005f38:	e7e1      	b.n	8005efe <_realloc_r+0x1e>
 8005f3a:	4635      	mov	r5, r6
 8005f3c:	e7df      	b.n	8005efe <_realloc_r+0x1e>
	...

08005f40 <_sbrk_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d06      	ldr	r5, [pc, #24]	; (8005f5c <_sbrk_r+0x1c>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	f7fa fe8a 	bl	8000c64 <_sbrk>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_sbrk_r+0x1a>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_sbrk_r+0x1a>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20004624 	.word	0x20004624

08005f60 <__malloc_lock>:
 8005f60:	4801      	ldr	r0, [pc, #4]	; (8005f68 <__malloc_lock+0x8>)
 8005f62:	f000 b811 	b.w	8005f88 <__retarget_lock_acquire_recursive>
 8005f66:	bf00      	nop
 8005f68:	20004628 	.word	0x20004628

08005f6c <__malloc_unlock>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	; (8005f74 <__malloc_unlock+0x8>)
 8005f6e:	f000 b80c 	b.w	8005f8a <__retarget_lock_release_recursive>
 8005f72:	bf00      	nop
 8005f74:	20004628 	.word	0x20004628

08005f78 <_malloc_usable_size_r>:
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f18      	subs	r0, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfbc      	itt	lt
 8005f82:	580b      	ldrlt	r3, [r1, r0]
 8005f84:	18c0      	addlt	r0, r0, r3
 8005f86:	4770      	bx	lr

08005f88 <__retarget_lock_acquire_recursive>:
 8005f88:	4770      	bx	lr

08005f8a <__retarget_lock_release_recursive>:
 8005f8a:	4770      	bx	lr

08005f8c <_init>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr

08005f98 <_fini>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr
